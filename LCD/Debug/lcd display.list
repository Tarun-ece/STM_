
lcd display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001e10  08001e10  00011e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e8c  08001e8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001e8c  08001e8c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e8c  08001e8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e90  08001e90  00011e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08001f04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001f04  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005290  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001341  00000000  00000000  00025329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00026670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00026ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c48  00000000  00000000  00026e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000560c  00000000  00000000  0003dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080299  00000000  00000000  000430cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000130c  00000000  00000000  000c33b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001df8 	.word	0x08001df8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001df8 	.word	0x08001df8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f86f 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f86b 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f867 	bl	80002a8 <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f862 	bl	80002a8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f85e 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f85a 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f856 	bl	80002a8 <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	4906      	ldr	r1, [pc, #24]	; (8000230 <Lcd_int+0x2c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f001 f9b4 	bl	8001584 <siprintf>

	Lcd_string(lcd, buffer);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f806 	bl	8000234 <Lcd_string>
}
 8000228:	bf00      	nop
 800022a:	3718      	adds	r7, #24
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	08001e10 	.word	0x08001e10

08000234 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
 8000242:	e00a      	b.n	800025a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f858 	bl	8000304 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	7bfc      	ldrb	r4, [r7, #15]
 800025c:	6838      	ldr	r0, [r7, #0]
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	429c      	cmp	r4, r3
 8000266:	d3ed      	bcc.n	8000244 <Lcd_string+0x10>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bd90      	pop	{r4, r7, pc}
	...

08000274 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
 8000280:	4613      	mov	r3, r2
 8000282:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <Lcd_cursor+0x30>)
 8000288:	5cd2      	ldrb	r2, [r2, r3]
 800028a:	78bb      	ldrb	r3, [r7, #2]
 800028c:	4413      	add	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	3b80      	subs	r3, #128	; 0x80
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f806 	bl	80002a8 <lcd_write_command>
	#endif
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08001e44 	.word	0x08001e44

080002a8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	899b      	ldrh	r3, [r3, #12]
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 fd2e 	bl	8000d20 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7d9b      	ldrb	r3, [r3, #22]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d111      	bne.n	80002f0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	091b      	lsrs	r3, r3, #4
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2204      	movs	r2, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f000 f842 	bl	8000360 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2204      	movs	r2, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f839 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002ee:	e005      	b.n	80002fc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2208      	movs	r2, #8
 80002f4:	4619      	mov	r1, r3
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 f832 	bl	8000360 <lcd_write>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6898      	ldr	r0, [r3, #8]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	899b      	ldrh	r3, [r3, #12]
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	f000 fd00 	bl	8000d20 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7d9b      	ldrb	r3, [r3, #22]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2204      	movs	r2, #4
 8000330:	4619      	mov	r1, r3
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 f814 	bl	8000360 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2204      	movs	r2, #4
 8000342:	4619      	mov	r1, r3
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f000 f80b 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800034a:	e005      	b.n	8000358 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2208      	movs	r2, #8
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f804 	bl	8000360 <lcd_write>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	4613      	mov	r3, r2
 800036e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e019      	b.n	80003aa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	8819      	ldrh	r1, [r3, #0]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	fa42 f303 	asr.w	r3, r2, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	f000 fcbe 	bl	8000d20 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	3301      	adds	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	7bfa      	ldrb	r2, [r7, #15]
 80003ac:	78bb      	ldrb	r3, [r7, #2]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d3e1      	bcc.n	8000376 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6918      	ldr	r0, [r3, #16]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	8a9b      	ldrh	r3, [r3, #20]
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	f000 fcaf 	bl	8000d20 <HAL_GPIO_WritePin>
	DELAY(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fa20 	bl	8000808 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6918      	ldr	r0, [r3, #16]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	8a9b      	ldrh	r3, [r3, #20]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	f000 fca4 	bl	8000d20 <HAL_GPIO_WritePin>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b5b0      	push	{r4, r5, r7, lr}
 80003e2:	b098      	sub	sp, #96	; 0x60
 80003e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e6:	f000 f9ad 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ea:	f000 f859 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ee:	f000 f893 	bl	8000518 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <main+0xb0>)
 80003f4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80003f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 80003fe:	4a25      	ldr	r2, [pc, #148]	; (8000494 <main+0xb4>)
 8000400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000408:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_2, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 800040c:	4638      	mov	r0, r7
 800040e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000412:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000416:	2300      	movs	r3, #0
 8000418:	9303      	str	r3, [sp, #12]
 800041a:	2308      	movs	r3, #8
 800041c:	9302      	str	r3, [sp, #8]
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <main+0xb8>)
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	2304      	movs	r3, #4
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <main+0xb8>)
 8000428:	f7ff fe98 	bl	800015c <Lcd_create>
 800042c:	f107 041c 	add.w	r4, r7, #28
 8000430:	463d      	mov	r5, r7
 8000432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000436:	e895 0003 	ldmia.w	r5, {r0, r1}
 800043a:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,1);
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	2201      	movs	r2, #1
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff14 	bl	8000274 <Lcd_cursor>
    Lcd_string(&lcd, "TPET");
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4912      	ldr	r1, [pc, #72]	; (800049c <main+0xbc>)
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff feee 	bl	8000234 <Lcd_string>
    for ( int x = 1; x <= 1000; x++)
 8000458:	2301      	movs	r3, #1
 800045a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800045c:	e013      	b.n	8000486 <main+0xa6>
    {
  	  Lcd_cursor(&lcd, 1,7);
 800045e:	f107 031c 	add.w	r3, r7, #28
 8000462:	2207      	movs	r2, #7
 8000464:	2101      	movs	r1, #1
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff04 	bl	8000274 <Lcd_cursor>
  	  Lcd_int(&lcd, x);
 800046c:	f107 031c 	add.w	r3, r7, #28
 8000470:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff fec6 	bl	8000204 <Lcd_int>
  	  HAL_Delay (1000);
 8000478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047c:	f000 f9c4 	bl	8000808 <HAL_Delay>
    for ( int x = 1; x <= 1000; x++)
 8000480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000482:	3301      	adds	r3, #1
 8000484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800048c:	dde7      	ble.n	800045e <main+0x7e>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048e:	e7fe      	b.n	800048e <main+0xae>
 8000490:	08001e1c 	.word	0x08001e1c
 8000494:	08001e2c 	.word	0x08001e2c
 8000498:	40010800 	.word	0x40010800
 800049c:	08001e14 	.word	0x08001e14

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	2228      	movs	r2, #40	; 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 f860 	bl	8001574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c6:	2301      	movs	r3, #1
 80004c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ca:	2310      	movs	r3, #16
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fc3a 	bl	8000d50 <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004e2:	f000 f86d 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	230f      	movs	r3, #15
 80004e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fea6 	bl	8001250 <HAL_RCC_ClockConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800050a:	f000 f859 	bl	80005c0 <Error_Handler>
  }
}
 800050e:	bf00      	nop
 8000510:	3740      	adds	r7, #64	; 0x40
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <MX_GPIO_Init+0x9c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <MX_GPIO_Init+0x9c>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <MX_GPIO_Init+0x9c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_GPIO_Init+0x9c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <MX_GPIO_Init+0x9c>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_GPIO_Init+0x9c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	210c      	movs	r1, #12
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <MX_GPIO_Init+0xa0>)
 8000562:	f000 fbdd 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f640 4103 	movw	r1, #3075	; 0xc03
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <MX_GPIO_Init+0xa4>)
 800056e:	f000 fbd7 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000572:	230c      	movs	r3, #12
 8000574:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	4619      	mov	r1, r3
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <MX_GPIO_Init+0xa0>)
 800058a:	f000 fa45 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800058e:	f640 4303 	movw	r3, #3075	; 0xc03
 8000592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4619      	mov	r1, r3
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_GPIO_Init+0xa4>)
 80005a8:	f000 fa36 	bl	8000a18 <HAL_GPIO_Init>

}
 80005ac:	bf00      	nop
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_MspInit+0x5c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_MspInit+0x5c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x5c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x5c>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_MspInit+0x60>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_MspInit+0x60>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>

0800064e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000676:	f000 f8ab 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f000 ff36 	bl	8001520 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20005000 	.word	0x20005000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	200000b0 	.word	0x200000b0

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ffe5 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f000 ff03 	bl	800152c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fe5b 	bl	80003e0 <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000734:	08001e94 	.word	0x08001e94
  ldr r2, =_sbss
 8000738:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800073c:	200000ac 	.word	0x200000ac

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f92b 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff ff34 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f935 	bl	80009fe <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f90b 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000098 	.word	0x20000098

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000098 	.word	0x20000098

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff fff0 	bl	80007f4 <HAL_GetTick>
 8000814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000820:	d005      	beq.n	800082e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_Delay+0x44>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082e:	bf00      	nop
 8000830:	f7ff ffe0 	bl	80007f4 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	429a      	cmp	r2, r3
 800083e:	d8f7      	bhi.n	8000830 <HAL_Delay+0x28>
  {
  }
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff90 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff49 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff5e 	bl	8000898 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff90 	bl	8000908 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5f 	bl	80008b4 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffb0 	bl	800096c <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e169      	b.n	8000d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8158 	bne.w	8000cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4a9a      	ldr	r2, [pc, #616]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d05e      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a54:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d875      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a98      	ldr	r2, [pc, #608]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d058      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a60:	4a96      	ldr	r2, [pc, #600]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d86f      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a66:	4a96      	ldr	r2, [pc, #600]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d052      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d869      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a72:	4a94      	ldr	r2, [pc, #592]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d04c      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a78:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d863      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d046      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a84:	4a90      	ldr	r2, [pc, #576]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d85d      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d82a      	bhi.n	8000ae4 <HAL_GPIO_Init+0xcc>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d859      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <HAL_GPIO_Init+0x80>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000aed 	.word	0x08000aed
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000b41 	.word	0x08000b41
 8000aa8:	08000b47 	.word	0x08000b47
 8000aac:	08000b47 	.word	0x08000b47
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b47 	.word	0x08000b47
 8000ab8:	08000b47 	.word	0x08000b47
 8000abc:	08000b47 	.word	0x08000b47
 8000ac0:	08000b47 	.word	0x08000b47
 8000ac4:	08000b47 	.word	0x08000b47
 8000ac8:	08000b47 	.word	0x08000b47
 8000acc:	08000b47 	.word	0x08000b47
 8000ad0:	08000b47 	.word	0x08000b47
 8000ad4:	08000b47 	.word	0x08000b47
 8000ad8:	08000b47 	.word	0x08000b47
 8000adc:	08000af5 	.word	0x08000af5
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	4a79      	ldr	r2, [pc, #484]	; (8000ccc <HAL_GPIO_Init+0x2b4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aea:	e02c      	b.n	8000b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e029      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3304      	adds	r3, #4
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e024      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3308      	adds	r3, #8
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e01f      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e01a      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e013      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	611a      	str	r2, [r3, #16]
          break;
 8000b32:	e009      	b.n	8000b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	615a      	str	r2, [r3, #20]
          break;
 8000b3e:	e003      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          break;
 8000b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d801      	bhi.n	8000b52 <HAL_GPIO_Init+0x13a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_Init+0x13e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3304      	adds	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d802      	bhi.n	8000b64 <HAL_GPIO_Init+0x14c>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x152>
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	210f      	movs	r1, #15
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	6a39      	ldr	r1, [r7, #32]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80b1 	beq.w	8000cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb0:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1ec>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3f      	ldr	r2, [pc, #252]	; (8000cdc <HAL_GPIO_Init+0x2c4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1e8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e0>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c16:	492f      	ldr	r1, [pc, #188]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	492c      	ldr	r1, [pc, #176]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4922      	ldr	r1, [pc, #136]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	491e      	ldr	r1, [pc, #120]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	4918      	ldr	r1, [pc, #96]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d021      	beq.n	8000cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
 8000cb4:	e021      	b.n	8000cfa <HAL_GPIO_Init+0x2e2>
 8000cb6:	bf00      	nop
 8000cb8:	10320000 	.word	0x10320000
 8000cbc:	10310000 	.word	0x10310000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10110000 	.word	0x10110000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4909      	ldr	r1, [pc, #36]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f47f ae8e 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	372c      	adds	r7, #44	; 0x2c
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3c:	e003      	b.n	8000d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e26c      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8087 	beq.w	8000e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4b92      	ldr	r3, [pc, #584]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4b8f      	ldr	r3, [pc, #572]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x12c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d168      	bne.n	8000e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e246      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x76>
 8000db8:	4b80      	ldr	r3, [pc, #512]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e02e      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x98>
 8000dce:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e01d      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0xbc>
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fce2 	bl	80007f4 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fcde 	bl	80007f4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e1fa      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe4>
 8000e52:	e014      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcce 	bl	80007f4 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fcca 	bl	80007f4 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1e6      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x10c>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d063      	beq.n	8000f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00b      	beq.n	8000eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d11c      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e1ba      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4939      	ldr	r1, [pc, #228]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	e03a      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fc83 	bl	80007f4 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc7f 	bl	80007f4 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e19b      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4927      	ldr	r1, [pc, #156]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc62 	bl	80007f4 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc5e 	bl	80007f4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e17a      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03a      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc42 	bl	80007f4 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc3e 	bl	80007f4 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e15a      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 faa6 	bl	80014e4 <RCC_Delay>
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc28 	bl	80007f4 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fc24 	bl	80007f4 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d908      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e140      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42420000 	.word	0x42420000
 8000fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b9e      	ldr	r3, [pc, #632]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a6 	beq.w	800112e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b97      	ldr	r3, [pc, #604]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10d      	bne.n	800100e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b94      	ldr	r3, [pc, #592]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a93      	ldr	r2, [pc, #588]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b8e      	ldr	r3, [pc, #568]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a8a      	ldr	r2, [pc, #552]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fbe5 	bl	80007f4 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fbe1 	bl	80007f4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	; 0x64
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0fd      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b81      	ldr	r3, [pc, #516]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x312>
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e02d      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x334>
 800106a:	4b76      	ldr	r3, [pc, #472]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a75      	ldr	r2, [pc, #468]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a72      	ldr	r2, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e01c      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x356>
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a6c      	ldr	r2, [pc, #432]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a69      	ldr	r2, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 80010a6:	4b67      	ldr	r3, [pc, #412]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a66      	ldr	r2, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fb95 	bl	80007f4 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fb91 	bl	80007f4 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0ab      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ee      	beq.n	80010ce <HAL_RCC_OscConfig+0x37e>
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb7f 	bl	80007f4 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fb7b 	bl	80007f4 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e095      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ee      	bne.n	80010fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8081 	beq.w	800123a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b42      	ldr	r3, [pc, #264]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d061      	beq.n	8001208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d146      	bne.n	80011da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fb4f 	bl	80007f4 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fb4b 	bl	80007f4 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e067      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	492d      	ldr	r1, [pc, #180]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a19      	ldr	r1, [r3, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	430b      	orrs	r3, r1
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb1f 	bl	80007f4 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fb1b 	bl	80007f4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e037      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x46a>
 80011d8:	e02f      	b.n	800123a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb08 	bl	80007f4 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fb04 	bl	80007f4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e020      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x498>
 8001206:	e018      	b.n	800123a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e013      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40007000 	.word	0x40007000
 800124c:	42420060 	.word	0x42420060

08001250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0d0      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d910      	bls.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4965      	ldr	r1, [pc, #404]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d115      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e073      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06b      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4936      	ldr	r1, [pc, #216]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fa58 	bl	80007f4 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff fa54 	bl	80007f4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e053      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d210      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4922      	ldr	r1, [pc, #136]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	5ccb      	ldrb	r3, [r1, r3]
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1cc>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f9b6 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000
 8001414:	40021000 	.word	0x40021000
 8001418:	08001e48 	.word	0x08001e48
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b490      	push	{r4, r7}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800142c:	1d3c      	adds	r4, r7, #4
 800142e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001434:	f240 2301 	movw	r3, #513	; 0x201
 8001438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d002      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x40>
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x46>
 8001462:	e02d      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001466:	623b      	str	r3, [r7, #32]
      break;
 8001468:	e02d      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001476:	4413      	add	r3, r2
 8001478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800147c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	0c5b      	lsrs	r3, r3, #17
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001496:	4413      	add	r3, r2
 8001498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800149c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014a2:	fb02 f203 	mul.w	r2, r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e004      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	623b      	str	r3, [r7, #32]
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014c2:	623b      	str	r3, [r7, #32]
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc90      	pop	{r4, r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	08001e34 	.word	0x08001e34
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <RCC_Delay+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <RCC_Delay+0x38>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0a5b      	lsrs	r3, r3, #9
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001500:	bf00      	nop
  }
  while (Delay --);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	60fa      	str	r2, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <RCC_Delay+0x1c>
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000000 	.word	0x20000000
 800151c:	10624dd3 	.word	0x10624dd3

08001520 <__errno>:
 8001520:	4b01      	ldr	r3, [pc, #4]	; (8001528 <__errno+0x8>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000000c 	.word	0x2000000c

0800152c <__libc_init_array>:
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	2600      	movs	r6, #0
 8001530:	4d0c      	ldr	r5, [pc, #48]	; (8001564 <__libc_init_array+0x38>)
 8001532:	4c0d      	ldr	r4, [pc, #52]	; (8001568 <__libc_init_array+0x3c>)
 8001534:	1b64      	subs	r4, r4, r5
 8001536:	10a4      	asrs	r4, r4, #2
 8001538:	42a6      	cmp	r6, r4
 800153a:	d109      	bne.n	8001550 <__libc_init_array+0x24>
 800153c:	f000 fc5c 	bl	8001df8 <_init>
 8001540:	2600      	movs	r6, #0
 8001542:	4d0a      	ldr	r5, [pc, #40]	; (800156c <__libc_init_array+0x40>)
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <__libc_init_array+0x44>)
 8001546:	1b64      	subs	r4, r4, r5
 8001548:	10a4      	asrs	r4, r4, #2
 800154a:	42a6      	cmp	r6, r4
 800154c:	d105      	bne.n	800155a <__libc_init_array+0x2e>
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	f855 3b04 	ldr.w	r3, [r5], #4
 8001554:	4798      	blx	r3
 8001556:	3601      	adds	r6, #1
 8001558:	e7ee      	b.n	8001538 <__libc_init_array+0xc>
 800155a:	f855 3b04 	ldr.w	r3, [r5], #4
 800155e:	4798      	blx	r3
 8001560:	3601      	adds	r6, #1
 8001562:	e7f2      	b.n	800154a <__libc_init_array+0x1e>
 8001564:	08001e8c 	.word	0x08001e8c
 8001568:	08001e8c 	.word	0x08001e8c
 800156c:	08001e8c 	.word	0x08001e8c
 8001570:	08001e90 	.word	0x08001e90

08001574 <memset>:
 8001574:	4603      	mov	r3, r0
 8001576:	4402      	add	r2, r0
 8001578:	4293      	cmp	r3, r2
 800157a:	d100      	bne.n	800157e <memset+0xa>
 800157c:	4770      	bx	lr
 800157e:	f803 1b01 	strb.w	r1, [r3], #1
 8001582:	e7f9      	b.n	8001578 <memset+0x4>

08001584 <siprintf>:
 8001584:	b40e      	push	{r1, r2, r3}
 8001586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800158a:	b500      	push	{lr}
 800158c:	b09c      	sub	sp, #112	; 0x70
 800158e:	ab1d      	add	r3, sp, #116	; 0x74
 8001590:	9002      	str	r0, [sp, #8]
 8001592:	9006      	str	r0, [sp, #24]
 8001594:	9107      	str	r1, [sp, #28]
 8001596:	9104      	str	r1, [sp, #16]
 8001598:	4808      	ldr	r0, [pc, #32]	; (80015bc <siprintf+0x38>)
 800159a:	4909      	ldr	r1, [pc, #36]	; (80015c0 <siprintf+0x3c>)
 800159c:	f853 2b04 	ldr.w	r2, [r3], #4
 80015a0:	9105      	str	r1, [sp, #20]
 80015a2:	6800      	ldr	r0, [r0, #0]
 80015a4:	a902      	add	r1, sp, #8
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	f000 f868 	bl	800167c <_svfiprintf_r>
 80015ac:	2200      	movs	r2, #0
 80015ae:	9b02      	ldr	r3, [sp, #8]
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	b01c      	add	sp, #112	; 0x70
 80015b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80015b8:	b003      	add	sp, #12
 80015ba:	4770      	bx	lr
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	ffff0208 	.word	0xffff0208

080015c4 <__ssputs_r>:
 80015c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015c8:	688e      	ldr	r6, [r1, #8]
 80015ca:	4682      	mov	sl, r0
 80015cc:	429e      	cmp	r6, r3
 80015ce:	460c      	mov	r4, r1
 80015d0:	4690      	mov	r8, r2
 80015d2:	461f      	mov	r7, r3
 80015d4:	d838      	bhi.n	8001648 <__ssputs_r+0x84>
 80015d6:	898a      	ldrh	r2, [r1, #12]
 80015d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80015dc:	d032      	beq.n	8001644 <__ssputs_r+0x80>
 80015de:	6825      	ldr	r5, [r4, #0]
 80015e0:	6909      	ldr	r1, [r1, #16]
 80015e2:	3301      	adds	r3, #1
 80015e4:	eba5 0901 	sub.w	r9, r5, r1
 80015e8:	6965      	ldr	r5, [r4, #20]
 80015ea:	444b      	add	r3, r9
 80015ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80015f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80015f4:	106d      	asrs	r5, r5, #1
 80015f6:	429d      	cmp	r5, r3
 80015f8:	bf38      	it	cc
 80015fa:	461d      	movcc	r5, r3
 80015fc:	0553      	lsls	r3, r2, #21
 80015fe:	d531      	bpl.n	8001664 <__ssputs_r+0xa0>
 8001600:	4629      	mov	r1, r5
 8001602:	f000 fb53 	bl	8001cac <_malloc_r>
 8001606:	4606      	mov	r6, r0
 8001608:	b950      	cbnz	r0, 8001620 <__ssputs_r+0x5c>
 800160a:	230c      	movs	r3, #12
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f8ca 3000 	str.w	r3, [sl]
 8001614:	89a3      	ldrh	r3, [r4, #12]
 8001616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800161a:	81a3      	strh	r3, [r4, #12]
 800161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001620:	464a      	mov	r2, r9
 8001622:	6921      	ldr	r1, [r4, #16]
 8001624:	f000 face 	bl	8001bc4 <memcpy>
 8001628:	89a3      	ldrh	r3, [r4, #12]
 800162a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001632:	81a3      	strh	r3, [r4, #12]
 8001634:	6126      	str	r6, [r4, #16]
 8001636:	444e      	add	r6, r9
 8001638:	6026      	str	r6, [r4, #0]
 800163a:	463e      	mov	r6, r7
 800163c:	6165      	str	r5, [r4, #20]
 800163e:	eba5 0509 	sub.w	r5, r5, r9
 8001642:	60a5      	str	r5, [r4, #8]
 8001644:	42be      	cmp	r6, r7
 8001646:	d900      	bls.n	800164a <__ssputs_r+0x86>
 8001648:	463e      	mov	r6, r7
 800164a:	4632      	mov	r2, r6
 800164c:	4641      	mov	r1, r8
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	f000 fac6 	bl	8001be0 <memmove>
 8001654:	68a3      	ldr	r3, [r4, #8]
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	1b9b      	subs	r3, r3, r6
 800165a:	4432      	add	r2, r6
 800165c:	2000      	movs	r0, #0
 800165e:	60a3      	str	r3, [r4, #8]
 8001660:	6022      	str	r2, [r4, #0]
 8001662:	e7db      	b.n	800161c <__ssputs_r+0x58>
 8001664:	462a      	mov	r2, r5
 8001666:	f000 fb7b 	bl	8001d60 <_realloc_r>
 800166a:	4606      	mov	r6, r0
 800166c:	2800      	cmp	r0, #0
 800166e:	d1e1      	bne.n	8001634 <__ssputs_r+0x70>
 8001670:	4650      	mov	r0, sl
 8001672:	6921      	ldr	r1, [r4, #16]
 8001674:	f000 face 	bl	8001c14 <_free_r>
 8001678:	e7c7      	b.n	800160a <__ssputs_r+0x46>
	...

0800167c <_svfiprintf_r>:
 800167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001680:	4698      	mov	r8, r3
 8001682:	898b      	ldrh	r3, [r1, #12]
 8001684:	4607      	mov	r7, r0
 8001686:	061b      	lsls	r3, r3, #24
 8001688:	460d      	mov	r5, r1
 800168a:	4614      	mov	r4, r2
 800168c:	b09d      	sub	sp, #116	; 0x74
 800168e:	d50e      	bpl.n	80016ae <_svfiprintf_r+0x32>
 8001690:	690b      	ldr	r3, [r1, #16]
 8001692:	b963      	cbnz	r3, 80016ae <_svfiprintf_r+0x32>
 8001694:	2140      	movs	r1, #64	; 0x40
 8001696:	f000 fb09 	bl	8001cac <_malloc_r>
 800169a:	6028      	str	r0, [r5, #0]
 800169c:	6128      	str	r0, [r5, #16]
 800169e:	b920      	cbnz	r0, 80016aa <_svfiprintf_r+0x2e>
 80016a0:	230c      	movs	r3, #12
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	e0d1      	b.n	800184e <_svfiprintf_r+0x1d2>
 80016aa:	2340      	movs	r3, #64	; 0x40
 80016ac:	616b      	str	r3, [r5, #20]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9309      	str	r3, [sp, #36]	; 0x24
 80016b2:	2320      	movs	r3, #32
 80016b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016b8:	2330      	movs	r3, #48	; 0x30
 80016ba:	f04f 0901 	mov.w	r9, #1
 80016be:	f8cd 800c 	str.w	r8, [sp, #12]
 80016c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001868 <_svfiprintf_r+0x1ec>
 80016c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016ca:	4623      	mov	r3, r4
 80016cc:	469a      	mov	sl, r3
 80016ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016d2:	b10a      	cbz	r2, 80016d8 <_svfiprintf_r+0x5c>
 80016d4:	2a25      	cmp	r2, #37	; 0x25
 80016d6:	d1f9      	bne.n	80016cc <_svfiprintf_r+0x50>
 80016d8:	ebba 0b04 	subs.w	fp, sl, r4
 80016dc:	d00b      	beq.n	80016f6 <_svfiprintf_r+0x7a>
 80016de:	465b      	mov	r3, fp
 80016e0:	4622      	mov	r2, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	4638      	mov	r0, r7
 80016e6:	f7ff ff6d 	bl	80015c4 <__ssputs_r>
 80016ea:	3001      	adds	r0, #1
 80016ec:	f000 80aa 	beq.w	8001844 <_svfiprintf_r+0x1c8>
 80016f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016f2:	445a      	add	r2, fp
 80016f4:	9209      	str	r2, [sp, #36]	; 0x24
 80016f6:	f89a 3000 	ldrb.w	r3, [sl]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a2 	beq.w	8001844 <_svfiprintf_r+0x1c8>
 8001700:	2300      	movs	r3, #0
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800170a:	f10a 0a01 	add.w	sl, sl, #1
 800170e:	9304      	str	r3, [sp, #16]
 8001710:	9307      	str	r3, [sp, #28]
 8001712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001716:	931a      	str	r3, [sp, #104]	; 0x68
 8001718:	4654      	mov	r4, sl
 800171a:	2205      	movs	r2, #5
 800171c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001720:	4851      	ldr	r0, [pc, #324]	; (8001868 <_svfiprintf_r+0x1ec>)
 8001722:	f000 fa41 	bl	8001ba8 <memchr>
 8001726:	9a04      	ldr	r2, [sp, #16]
 8001728:	b9d8      	cbnz	r0, 8001762 <_svfiprintf_r+0xe6>
 800172a:	06d0      	lsls	r0, r2, #27
 800172c:	bf44      	itt	mi
 800172e:	2320      	movmi	r3, #32
 8001730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001734:	0711      	lsls	r1, r2, #28
 8001736:	bf44      	itt	mi
 8001738:	232b      	movmi	r3, #43	; 0x2b
 800173a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800173e:	f89a 3000 	ldrb.w	r3, [sl]
 8001742:	2b2a      	cmp	r3, #42	; 0x2a
 8001744:	d015      	beq.n	8001772 <_svfiprintf_r+0xf6>
 8001746:	4654      	mov	r4, sl
 8001748:	2000      	movs	r0, #0
 800174a:	f04f 0c0a 	mov.w	ip, #10
 800174e:	9a07      	ldr	r2, [sp, #28]
 8001750:	4621      	mov	r1, r4
 8001752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001756:	3b30      	subs	r3, #48	; 0x30
 8001758:	2b09      	cmp	r3, #9
 800175a:	d94e      	bls.n	80017fa <_svfiprintf_r+0x17e>
 800175c:	b1b0      	cbz	r0, 800178c <_svfiprintf_r+0x110>
 800175e:	9207      	str	r2, [sp, #28]
 8001760:	e014      	b.n	800178c <_svfiprintf_r+0x110>
 8001762:	eba0 0308 	sub.w	r3, r0, r8
 8001766:	fa09 f303 	lsl.w	r3, r9, r3
 800176a:	4313      	orrs	r3, r2
 800176c:	46a2      	mov	sl, r4
 800176e:	9304      	str	r3, [sp, #16]
 8001770:	e7d2      	b.n	8001718 <_svfiprintf_r+0x9c>
 8001772:	9b03      	ldr	r3, [sp, #12]
 8001774:	1d19      	adds	r1, r3, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	9103      	str	r1, [sp, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	bfbb      	ittet	lt
 800177e:	425b      	neglt	r3, r3
 8001780:	f042 0202 	orrlt.w	r2, r2, #2
 8001784:	9307      	strge	r3, [sp, #28]
 8001786:	9307      	strlt	r3, [sp, #28]
 8001788:	bfb8      	it	lt
 800178a:	9204      	strlt	r2, [sp, #16]
 800178c:	7823      	ldrb	r3, [r4, #0]
 800178e:	2b2e      	cmp	r3, #46	; 0x2e
 8001790:	d10c      	bne.n	80017ac <_svfiprintf_r+0x130>
 8001792:	7863      	ldrb	r3, [r4, #1]
 8001794:	2b2a      	cmp	r3, #42	; 0x2a
 8001796:	d135      	bne.n	8001804 <_svfiprintf_r+0x188>
 8001798:	9b03      	ldr	r3, [sp, #12]
 800179a:	3402      	adds	r4, #2
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	9203      	str	r2, [sp, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bfb8      	it	lt
 80017a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80017aa:	9305      	str	r3, [sp, #20]
 80017ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001878 <_svfiprintf_r+0x1fc>
 80017b0:	2203      	movs	r2, #3
 80017b2:	4650      	mov	r0, sl
 80017b4:	7821      	ldrb	r1, [r4, #0]
 80017b6:	f000 f9f7 	bl	8001ba8 <memchr>
 80017ba:	b140      	cbz	r0, 80017ce <_svfiprintf_r+0x152>
 80017bc:	2340      	movs	r3, #64	; 0x40
 80017be:	eba0 000a 	sub.w	r0, r0, sl
 80017c2:	fa03 f000 	lsl.w	r0, r3, r0
 80017c6:	9b04      	ldr	r3, [sp, #16]
 80017c8:	3401      	adds	r4, #1
 80017ca:	4303      	orrs	r3, r0
 80017cc:	9304      	str	r3, [sp, #16]
 80017ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017d2:	2206      	movs	r2, #6
 80017d4:	4825      	ldr	r0, [pc, #148]	; (800186c <_svfiprintf_r+0x1f0>)
 80017d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017da:	f000 f9e5 	bl	8001ba8 <memchr>
 80017de:	2800      	cmp	r0, #0
 80017e0:	d038      	beq.n	8001854 <_svfiprintf_r+0x1d8>
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <_svfiprintf_r+0x1f4>)
 80017e4:	bb1b      	cbnz	r3, 800182e <_svfiprintf_r+0x1b2>
 80017e6:	9b03      	ldr	r3, [sp, #12]
 80017e8:	3307      	adds	r3, #7
 80017ea:	f023 0307 	bic.w	r3, r3, #7
 80017ee:	3308      	adds	r3, #8
 80017f0:	9303      	str	r3, [sp, #12]
 80017f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f4:	4433      	add	r3, r6
 80017f6:	9309      	str	r3, [sp, #36]	; 0x24
 80017f8:	e767      	b.n	80016ca <_svfiprintf_r+0x4e>
 80017fa:	460c      	mov	r4, r1
 80017fc:	2001      	movs	r0, #1
 80017fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001802:	e7a5      	b.n	8001750 <_svfiprintf_r+0xd4>
 8001804:	2300      	movs	r3, #0
 8001806:	f04f 0c0a 	mov.w	ip, #10
 800180a:	4619      	mov	r1, r3
 800180c:	3401      	adds	r4, #1
 800180e:	9305      	str	r3, [sp, #20]
 8001810:	4620      	mov	r0, r4
 8001812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001816:	3a30      	subs	r2, #48	; 0x30
 8001818:	2a09      	cmp	r2, #9
 800181a:	d903      	bls.n	8001824 <_svfiprintf_r+0x1a8>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0c5      	beq.n	80017ac <_svfiprintf_r+0x130>
 8001820:	9105      	str	r1, [sp, #20]
 8001822:	e7c3      	b.n	80017ac <_svfiprintf_r+0x130>
 8001824:	4604      	mov	r4, r0
 8001826:	2301      	movs	r3, #1
 8001828:	fb0c 2101 	mla	r1, ip, r1, r2
 800182c:	e7f0      	b.n	8001810 <_svfiprintf_r+0x194>
 800182e:	ab03      	add	r3, sp, #12
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	462a      	mov	r2, r5
 8001834:	4638      	mov	r0, r7
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <_svfiprintf_r+0x1f8>)
 8001838:	a904      	add	r1, sp, #16
 800183a:	f3af 8000 	nop.w
 800183e:	1c42      	adds	r2, r0, #1
 8001840:	4606      	mov	r6, r0
 8001842:	d1d6      	bne.n	80017f2 <_svfiprintf_r+0x176>
 8001844:	89ab      	ldrh	r3, [r5, #12]
 8001846:	065b      	lsls	r3, r3, #25
 8001848:	f53f af2c 	bmi.w	80016a4 <_svfiprintf_r+0x28>
 800184c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800184e:	b01d      	add	sp, #116	; 0x74
 8001850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001854:	ab03      	add	r3, sp, #12
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	462a      	mov	r2, r5
 800185a:	4638      	mov	r0, r7
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <_svfiprintf_r+0x1f8>)
 800185e:	a904      	add	r1, sp, #16
 8001860:	f000 f87c 	bl	800195c <_printf_i>
 8001864:	e7eb      	b.n	800183e <_svfiprintf_r+0x1c2>
 8001866:	bf00      	nop
 8001868:	08001e58 	.word	0x08001e58
 800186c:	08001e62 	.word	0x08001e62
 8001870:	00000000 	.word	0x00000000
 8001874:	080015c5 	.word	0x080015c5
 8001878:	08001e5e 	.word	0x08001e5e

0800187c <_printf_common>:
 800187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001880:	4616      	mov	r6, r2
 8001882:	4699      	mov	r9, r3
 8001884:	688a      	ldr	r2, [r1, #8]
 8001886:	690b      	ldr	r3, [r1, #16]
 8001888:	4607      	mov	r7, r0
 800188a:	4293      	cmp	r3, r2
 800188c:	bfb8      	it	lt
 800188e:	4613      	movlt	r3, r2
 8001890:	6033      	str	r3, [r6, #0]
 8001892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001896:	460c      	mov	r4, r1
 8001898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800189c:	b10a      	cbz	r2, 80018a2 <_printf_common+0x26>
 800189e:	3301      	adds	r3, #1
 80018a0:	6033      	str	r3, [r6, #0]
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	0699      	lsls	r1, r3, #26
 80018a6:	bf42      	ittt	mi
 80018a8:	6833      	ldrmi	r3, [r6, #0]
 80018aa:	3302      	addmi	r3, #2
 80018ac:	6033      	strmi	r3, [r6, #0]
 80018ae:	6825      	ldr	r5, [r4, #0]
 80018b0:	f015 0506 	ands.w	r5, r5, #6
 80018b4:	d106      	bne.n	80018c4 <_printf_common+0x48>
 80018b6:	f104 0a19 	add.w	sl, r4, #25
 80018ba:	68e3      	ldr	r3, [r4, #12]
 80018bc:	6832      	ldr	r2, [r6, #0]
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	42ab      	cmp	r3, r5
 80018c2:	dc28      	bgt.n	8001916 <_printf_common+0x9a>
 80018c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018c8:	1e13      	subs	r3, r2, #0
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	bf18      	it	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	0692      	lsls	r2, r2, #26
 80018d2:	d42d      	bmi.n	8001930 <_printf_common+0xb4>
 80018d4:	4649      	mov	r1, r9
 80018d6:	4638      	mov	r0, r7
 80018d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018dc:	47c0      	blx	r8
 80018de:	3001      	adds	r0, #1
 80018e0:	d020      	beq.n	8001924 <_printf_common+0xa8>
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	68e5      	ldr	r5, [r4, #12]
 80018e6:	f003 0306 	and.w	r3, r3, #6
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf18      	it	ne
 80018ee:	2500      	movne	r5, #0
 80018f0:	6832      	ldr	r2, [r6, #0]
 80018f2:	f04f 0600 	mov.w	r6, #0
 80018f6:	68a3      	ldr	r3, [r4, #8]
 80018f8:	bf08      	it	eq
 80018fa:	1aad      	subeq	r5, r5, r2
 80018fc:	6922      	ldr	r2, [r4, #16]
 80018fe:	bf08      	it	eq
 8001900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001904:	4293      	cmp	r3, r2
 8001906:	bfc4      	itt	gt
 8001908:	1a9b      	subgt	r3, r3, r2
 800190a:	18ed      	addgt	r5, r5, r3
 800190c:	341a      	adds	r4, #26
 800190e:	42b5      	cmp	r5, r6
 8001910:	d11a      	bne.n	8001948 <_printf_common+0xcc>
 8001912:	2000      	movs	r0, #0
 8001914:	e008      	b.n	8001928 <_printf_common+0xac>
 8001916:	2301      	movs	r3, #1
 8001918:	4652      	mov	r2, sl
 800191a:	4649      	mov	r1, r9
 800191c:	4638      	mov	r0, r7
 800191e:	47c0      	blx	r8
 8001920:	3001      	adds	r0, #1
 8001922:	d103      	bne.n	800192c <_printf_common+0xb0>
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800192c:	3501      	adds	r5, #1
 800192e:	e7c4      	b.n	80018ba <_printf_common+0x3e>
 8001930:	2030      	movs	r0, #48	; 0x30
 8001932:	18e1      	adds	r1, r4, r3
 8001934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800193e:	4422      	add	r2, r4
 8001940:	3302      	adds	r3, #2
 8001942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001946:	e7c5      	b.n	80018d4 <_printf_common+0x58>
 8001948:	2301      	movs	r3, #1
 800194a:	4622      	mov	r2, r4
 800194c:	4649      	mov	r1, r9
 800194e:	4638      	mov	r0, r7
 8001950:	47c0      	blx	r8
 8001952:	3001      	adds	r0, #1
 8001954:	d0e6      	beq.n	8001924 <_printf_common+0xa8>
 8001956:	3601      	adds	r6, #1
 8001958:	e7d9      	b.n	800190e <_printf_common+0x92>
	...

0800195c <_printf_i>:
 800195c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001960:	460c      	mov	r4, r1
 8001962:	7e27      	ldrb	r7, [r4, #24]
 8001964:	4691      	mov	r9, r2
 8001966:	2f78      	cmp	r7, #120	; 0x78
 8001968:	4680      	mov	r8, r0
 800196a:	469a      	mov	sl, r3
 800196c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800196e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001972:	d807      	bhi.n	8001984 <_printf_i+0x28>
 8001974:	2f62      	cmp	r7, #98	; 0x62
 8001976:	d80a      	bhi.n	800198e <_printf_i+0x32>
 8001978:	2f00      	cmp	r7, #0
 800197a:	f000 80d9 	beq.w	8001b30 <_printf_i+0x1d4>
 800197e:	2f58      	cmp	r7, #88	; 0x58
 8001980:	f000 80a4 	beq.w	8001acc <_printf_i+0x170>
 8001984:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800198c:	e03a      	b.n	8001a04 <_printf_i+0xa8>
 800198e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001992:	2b15      	cmp	r3, #21
 8001994:	d8f6      	bhi.n	8001984 <_printf_i+0x28>
 8001996:	a001      	add	r0, pc, #4	; (adr r0, 800199c <_printf_i+0x40>)
 8001998:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800199c:	080019f5 	.word	0x080019f5
 80019a0:	08001a09 	.word	0x08001a09
 80019a4:	08001985 	.word	0x08001985
 80019a8:	08001985 	.word	0x08001985
 80019ac:	08001985 	.word	0x08001985
 80019b0:	08001985 	.word	0x08001985
 80019b4:	08001a09 	.word	0x08001a09
 80019b8:	08001985 	.word	0x08001985
 80019bc:	08001985 	.word	0x08001985
 80019c0:	08001985 	.word	0x08001985
 80019c4:	08001985 	.word	0x08001985
 80019c8:	08001b17 	.word	0x08001b17
 80019cc:	08001a39 	.word	0x08001a39
 80019d0:	08001af9 	.word	0x08001af9
 80019d4:	08001985 	.word	0x08001985
 80019d8:	08001985 	.word	0x08001985
 80019dc:	08001b39 	.word	0x08001b39
 80019e0:	08001985 	.word	0x08001985
 80019e4:	08001a39 	.word	0x08001a39
 80019e8:	08001985 	.word	0x08001985
 80019ec:	08001985 	.word	0x08001985
 80019f0:	08001b01 	.word	0x08001b01
 80019f4:	680b      	ldr	r3, [r1, #0]
 80019f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	600a      	str	r2, [r1, #0]
 8001a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0a4      	b.n	8001b52 <_printf_i+0x1f6>
 8001a08:	6825      	ldr	r5, [r4, #0]
 8001a0a:	6808      	ldr	r0, [r1, #0]
 8001a0c:	062e      	lsls	r6, r5, #24
 8001a0e:	f100 0304 	add.w	r3, r0, #4
 8001a12:	d50a      	bpl.n	8001a2a <_printf_i+0xce>
 8001a14:	6805      	ldr	r5, [r0, #0]
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	2d00      	cmp	r5, #0
 8001a1a:	da03      	bge.n	8001a24 <_printf_i+0xc8>
 8001a1c:	232d      	movs	r3, #45	; 0x2d
 8001a1e:	426d      	negs	r5, r5
 8001a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a24:	230a      	movs	r3, #10
 8001a26:	485e      	ldr	r0, [pc, #376]	; (8001ba0 <_printf_i+0x244>)
 8001a28:	e019      	b.n	8001a5e <_printf_i+0x102>
 8001a2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001a2e:	6805      	ldr	r5, [r0, #0]
 8001a30:	600b      	str	r3, [r1, #0]
 8001a32:	bf18      	it	ne
 8001a34:	b22d      	sxthne	r5, r5
 8001a36:	e7ef      	b.n	8001a18 <_printf_i+0xbc>
 8001a38:	680b      	ldr	r3, [r1, #0]
 8001a3a:	6825      	ldr	r5, [r4, #0]
 8001a3c:	1d18      	adds	r0, r3, #4
 8001a3e:	6008      	str	r0, [r1, #0]
 8001a40:	0628      	lsls	r0, r5, #24
 8001a42:	d501      	bpl.n	8001a48 <_printf_i+0xec>
 8001a44:	681d      	ldr	r5, [r3, #0]
 8001a46:	e002      	b.n	8001a4e <_printf_i+0xf2>
 8001a48:	0669      	lsls	r1, r5, #25
 8001a4a:	d5fb      	bpl.n	8001a44 <_printf_i+0xe8>
 8001a4c:	881d      	ldrh	r5, [r3, #0]
 8001a4e:	2f6f      	cmp	r7, #111	; 0x6f
 8001a50:	bf0c      	ite	eq
 8001a52:	2308      	moveq	r3, #8
 8001a54:	230a      	movne	r3, #10
 8001a56:	4852      	ldr	r0, [pc, #328]	; (8001ba0 <_printf_i+0x244>)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a5e:	6866      	ldr	r6, [r4, #4]
 8001a60:	2e00      	cmp	r6, #0
 8001a62:	bfa8      	it	ge
 8001a64:	6821      	ldrge	r1, [r4, #0]
 8001a66:	60a6      	str	r6, [r4, #8]
 8001a68:	bfa4      	itt	ge
 8001a6a:	f021 0104 	bicge.w	r1, r1, #4
 8001a6e:	6021      	strge	r1, [r4, #0]
 8001a70:	b90d      	cbnz	r5, 8001a76 <_printf_i+0x11a>
 8001a72:	2e00      	cmp	r6, #0
 8001a74:	d04d      	beq.n	8001b12 <_printf_i+0x1b6>
 8001a76:	4616      	mov	r6, r2
 8001a78:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a7c:	fb03 5711 	mls	r7, r3, r1, r5
 8001a80:	5dc7      	ldrb	r7, [r0, r7]
 8001a82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a86:	462f      	mov	r7, r5
 8001a88:	42bb      	cmp	r3, r7
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	d9f4      	bls.n	8001a78 <_printf_i+0x11c>
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d10b      	bne.n	8001aaa <_printf_i+0x14e>
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	07df      	lsls	r7, r3, #31
 8001a96:	d508      	bpl.n	8001aaa <_printf_i+0x14e>
 8001a98:	6923      	ldr	r3, [r4, #16]
 8001a9a:	6861      	ldr	r1, [r4, #4]
 8001a9c:	4299      	cmp	r1, r3
 8001a9e:	bfde      	ittt	le
 8001aa0:	2330      	movle	r3, #48	; 0x30
 8001aa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001aa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001aaa:	1b92      	subs	r2, r2, r6
 8001aac:	6122      	str	r2, [r4, #16]
 8001aae:	464b      	mov	r3, r9
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	f8cd a000 	str.w	sl, [sp]
 8001ab8:	aa03      	add	r2, sp, #12
 8001aba:	f7ff fedf 	bl	800187c <_printf_common>
 8001abe:	3001      	adds	r0, #1
 8001ac0:	d14c      	bne.n	8001b5c <_printf_i+0x200>
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac6:	b004      	add	sp, #16
 8001ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001acc:	4834      	ldr	r0, [pc, #208]	; (8001ba0 <_printf_i+0x244>)
 8001ace:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001ad2:	680e      	ldr	r6, [r1, #0]
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	f856 5b04 	ldr.w	r5, [r6], #4
 8001ada:	061f      	lsls	r7, r3, #24
 8001adc:	600e      	str	r6, [r1, #0]
 8001ade:	d514      	bpl.n	8001b0a <_printf_i+0x1ae>
 8001ae0:	07d9      	lsls	r1, r3, #31
 8001ae2:	bf44      	itt	mi
 8001ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8001ae8:	6023      	strmi	r3, [r4, #0]
 8001aea:	b91d      	cbnz	r5, 8001af4 <_printf_i+0x198>
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	f023 0320 	bic.w	r3, r3, #32
 8001af2:	6023      	str	r3, [r4, #0]
 8001af4:	2310      	movs	r3, #16
 8001af6:	e7af      	b.n	8001a58 <_printf_i+0xfc>
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	f043 0320 	orr.w	r3, r3, #32
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	2378      	movs	r3, #120	; 0x78
 8001b02:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <_printf_i+0x248>)
 8001b04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b08:	e7e3      	b.n	8001ad2 <_printf_i+0x176>
 8001b0a:	065e      	lsls	r6, r3, #25
 8001b0c:	bf48      	it	mi
 8001b0e:	b2ad      	uxthmi	r5, r5
 8001b10:	e7e6      	b.n	8001ae0 <_printf_i+0x184>
 8001b12:	4616      	mov	r6, r2
 8001b14:	e7bb      	b.n	8001a8e <_printf_i+0x132>
 8001b16:	680b      	ldr	r3, [r1, #0]
 8001b18:	6826      	ldr	r6, [r4, #0]
 8001b1a:	1d1d      	adds	r5, r3, #4
 8001b1c:	6960      	ldr	r0, [r4, #20]
 8001b1e:	600d      	str	r5, [r1, #0]
 8001b20:	0635      	lsls	r5, r6, #24
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	d501      	bpl.n	8001b2a <_printf_i+0x1ce>
 8001b26:	6018      	str	r0, [r3, #0]
 8001b28:	e002      	b.n	8001b30 <_printf_i+0x1d4>
 8001b2a:	0671      	lsls	r1, r6, #25
 8001b2c:	d5fb      	bpl.n	8001b26 <_printf_i+0x1ca>
 8001b2e:	8018      	strh	r0, [r3, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	4616      	mov	r6, r2
 8001b34:	6123      	str	r3, [r4, #16]
 8001b36:	e7ba      	b.n	8001aae <_printf_i+0x152>
 8001b38:	680b      	ldr	r3, [r1, #0]
 8001b3a:	1d1a      	adds	r2, r3, #4
 8001b3c:	600a      	str	r2, [r1, #0]
 8001b3e:	681e      	ldr	r6, [r3, #0]
 8001b40:	2100      	movs	r1, #0
 8001b42:	4630      	mov	r0, r6
 8001b44:	6862      	ldr	r2, [r4, #4]
 8001b46:	f000 f82f 	bl	8001ba8 <memchr>
 8001b4a:	b108      	cbz	r0, 8001b50 <_printf_i+0x1f4>
 8001b4c:	1b80      	subs	r0, r0, r6
 8001b4e:	6060      	str	r0, [r4, #4]
 8001b50:	6863      	ldr	r3, [r4, #4]
 8001b52:	6123      	str	r3, [r4, #16]
 8001b54:	2300      	movs	r3, #0
 8001b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b5a:	e7a8      	b.n	8001aae <_printf_i+0x152>
 8001b5c:	4632      	mov	r2, r6
 8001b5e:	4649      	mov	r1, r9
 8001b60:	4640      	mov	r0, r8
 8001b62:	6923      	ldr	r3, [r4, #16]
 8001b64:	47d0      	blx	sl
 8001b66:	3001      	adds	r0, #1
 8001b68:	d0ab      	beq.n	8001ac2 <_printf_i+0x166>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	079b      	lsls	r3, r3, #30
 8001b6e:	d413      	bmi.n	8001b98 <_printf_i+0x23c>
 8001b70:	68e0      	ldr	r0, [r4, #12]
 8001b72:	9b03      	ldr	r3, [sp, #12]
 8001b74:	4298      	cmp	r0, r3
 8001b76:	bfb8      	it	lt
 8001b78:	4618      	movlt	r0, r3
 8001b7a:	e7a4      	b.n	8001ac6 <_printf_i+0x16a>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4632      	mov	r2, r6
 8001b80:	4649      	mov	r1, r9
 8001b82:	4640      	mov	r0, r8
 8001b84:	47d0      	blx	sl
 8001b86:	3001      	adds	r0, #1
 8001b88:	d09b      	beq.n	8001ac2 <_printf_i+0x166>
 8001b8a:	3501      	adds	r5, #1
 8001b8c:	68e3      	ldr	r3, [r4, #12]
 8001b8e:	9903      	ldr	r1, [sp, #12]
 8001b90:	1a5b      	subs	r3, r3, r1
 8001b92:	42ab      	cmp	r3, r5
 8001b94:	dcf2      	bgt.n	8001b7c <_printf_i+0x220>
 8001b96:	e7eb      	b.n	8001b70 <_printf_i+0x214>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	f104 0619 	add.w	r6, r4, #25
 8001b9e:	e7f5      	b.n	8001b8c <_printf_i+0x230>
 8001ba0:	08001e69 	.word	0x08001e69
 8001ba4:	08001e7a 	.word	0x08001e7a

08001ba8 <memchr>:
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b510      	push	{r4, lr}
 8001bac:	b2c9      	uxtb	r1, r1
 8001bae:	4402      	add	r2, r0
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	d101      	bne.n	8001bba <memchr+0x12>
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e003      	b.n	8001bc2 <memchr+0x1a>
 8001bba:	7804      	ldrb	r4, [r0, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	428c      	cmp	r4, r1
 8001bc0:	d1f6      	bne.n	8001bb0 <memchr+0x8>
 8001bc2:	bd10      	pop	{r4, pc}

08001bc4 <memcpy>:
 8001bc4:	440a      	add	r2, r1
 8001bc6:	4291      	cmp	r1, r2
 8001bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001bcc:	d100      	bne.n	8001bd0 <memcpy+0xc>
 8001bce:	4770      	bx	lr
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bd6:	4291      	cmp	r1, r2
 8001bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bdc:	d1f9      	bne.n	8001bd2 <memcpy+0xe>
 8001bde:	bd10      	pop	{r4, pc}

08001be0 <memmove>:
 8001be0:	4288      	cmp	r0, r1
 8001be2:	b510      	push	{r4, lr}
 8001be4:	eb01 0402 	add.w	r4, r1, r2
 8001be8:	d902      	bls.n	8001bf0 <memmove+0x10>
 8001bea:	4284      	cmp	r4, r0
 8001bec:	4623      	mov	r3, r4
 8001bee:	d807      	bhi.n	8001c00 <memmove+0x20>
 8001bf0:	1e43      	subs	r3, r0, #1
 8001bf2:	42a1      	cmp	r1, r4
 8001bf4:	d008      	beq.n	8001c08 <memmove+0x28>
 8001bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001bfe:	e7f8      	b.n	8001bf2 <memmove+0x12>
 8001c00:	4601      	mov	r1, r0
 8001c02:	4402      	add	r2, r0
 8001c04:	428a      	cmp	r2, r1
 8001c06:	d100      	bne.n	8001c0a <memmove+0x2a>
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c12:	e7f7      	b.n	8001c04 <memmove+0x24>

08001c14 <_free_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4605      	mov	r5, r0
 8001c18:	2900      	cmp	r1, #0
 8001c1a:	d043      	beq.n	8001ca4 <_free_r+0x90>
 8001c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c20:	1f0c      	subs	r4, r1, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bfb8      	it	lt
 8001c26:	18e4      	addlt	r4, r4, r3
 8001c28:	f000 f8d0 	bl	8001dcc <__malloc_lock>
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <_free_r+0x94>)
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	4610      	mov	r0, r2
 8001c32:	b933      	cbnz	r3, 8001c42 <_free_r+0x2e>
 8001c34:	6063      	str	r3, [r4, #4]
 8001c36:	6014      	str	r4, [r2, #0]
 8001c38:	4628      	mov	r0, r5
 8001c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c3e:	f000 b8cb 	b.w	8001dd8 <__malloc_unlock>
 8001c42:	42a3      	cmp	r3, r4
 8001c44:	d90a      	bls.n	8001c5c <_free_r+0x48>
 8001c46:	6821      	ldr	r1, [r4, #0]
 8001c48:	1862      	adds	r2, r4, r1
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	bf01      	itttt	eq
 8001c4e:	681a      	ldreq	r2, [r3, #0]
 8001c50:	685b      	ldreq	r3, [r3, #4]
 8001c52:	1852      	addeq	r2, r2, r1
 8001c54:	6022      	streq	r2, [r4, #0]
 8001c56:	6063      	str	r3, [r4, #4]
 8001c58:	6004      	str	r4, [r0, #0]
 8001c5a:	e7ed      	b.n	8001c38 <_free_r+0x24>
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	b10b      	cbz	r3, 8001c66 <_free_r+0x52>
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	d9fa      	bls.n	8001c5c <_free_r+0x48>
 8001c66:	6811      	ldr	r1, [r2, #0]
 8001c68:	1850      	adds	r0, r2, r1
 8001c6a:	42a0      	cmp	r0, r4
 8001c6c:	d10b      	bne.n	8001c86 <_free_r+0x72>
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	4401      	add	r1, r0
 8001c72:	1850      	adds	r0, r2, r1
 8001c74:	4283      	cmp	r3, r0
 8001c76:	6011      	str	r1, [r2, #0]
 8001c78:	d1de      	bne.n	8001c38 <_free_r+0x24>
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4401      	add	r1, r0
 8001c80:	6011      	str	r1, [r2, #0]
 8001c82:	6053      	str	r3, [r2, #4]
 8001c84:	e7d8      	b.n	8001c38 <_free_r+0x24>
 8001c86:	d902      	bls.n	8001c8e <_free_r+0x7a>
 8001c88:	230c      	movs	r3, #12
 8001c8a:	602b      	str	r3, [r5, #0]
 8001c8c:	e7d4      	b.n	8001c38 <_free_r+0x24>
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	1821      	adds	r1, r4, r0
 8001c92:	428b      	cmp	r3, r1
 8001c94:	bf01      	itttt	eq
 8001c96:	6819      	ldreq	r1, [r3, #0]
 8001c98:	685b      	ldreq	r3, [r3, #4]
 8001c9a:	1809      	addeq	r1, r1, r0
 8001c9c:	6021      	streq	r1, [r4, #0]
 8001c9e:	6063      	str	r3, [r4, #4]
 8001ca0:	6054      	str	r4, [r2, #4]
 8001ca2:	e7c9      	b.n	8001c38 <_free_r+0x24>
 8001ca4:	bd38      	pop	{r3, r4, r5, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000090 	.word	0x20000090

08001cac <_malloc_r>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	1ccd      	adds	r5, r1, #3
 8001cb0:	f025 0503 	bic.w	r5, r5, #3
 8001cb4:	3508      	adds	r5, #8
 8001cb6:	2d0c      	cmp	r5, #12
 8001cb8:	bf38      	it	cc
 8001cba:	250c      	movcc	r5, #12
 8001cbc:	2d00      	cmp	r5, #0
 8001cbe:	4606      	mov	r6, r0
 8001cc0:	db01      	blt.n	8001cc6 <_malloc_r+0x1a>
 8001cc2:	42a9      	cmp	r1, r5
 8001cc4:	d903      	bls.n	8001cce <_malloc_r+0x22>
 8001cc6:	230c      	movs	r3, #12
 8001cc8:	6033      	str	r3, [r6, #0]
 8001cca:	2000      	movs	r0, #0
 8001ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cce:	f000 f87d 	bl	8001dcc <__malloc_lock>
 8001cd2:	4921      	ldr	r1, [pc, #132]	; (8001d58 <_malloc_r+0xac>)
 8001cd4:	680a      	ldr	r2, [r1, #0]
 8001cd6:	4614      	mov	r4, r2
 8001cd8:	b99c      	cbnz	r4, 8001d02 <_malloc_r+0x56>
 8001cda:	4f20      	ldr	r7, [pc, #128]	; (8001d5c <_malloc_r+0xb0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b923      	cbnz	r3, 8001cea <_malloc_r+0x3e>
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f000 f862 	bl	8001dac <_sbrk_r>
 8001ce8:	6038      	str	r0, [r7, #0]
 8001cea:	4629      	mov	r1, r5
 8001cec:	4630      	mov	r0, r6
 8001cee:	f000 f85d 	bl	8001dac <_sbrk_r>
 8001cf2:	1c43      	adds	r3, r0, #1
 8001cf4:	d123      	bne.n	8001d3e <_malloc_r+0x92>
 8001cf6:	230c      	movs	r3, #12
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	6033      	str	r3, [r6, #0]
 8001cfc:	f000 f86c 	bl	8001dd8 <__malloc_unlock>
 8001d00:	e7e3      	b.n	8001cca <_malloc_r+0x1e>
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	1b5b      	subs	r3, r3, r5
 8001d06:	d417      	bmi.n	8001d38 <_malloc_r+0x8c>
 8001d08:	2b0b      	cmp	r3, #11
 8001d0a:	d903      	bls.n	8001d14 <_malloc_r+0x68>
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	441c      	add	r4, r3
 8001d10:	6025      	str	r5, [r4, #0]
 8001d12:	e004      	b.n	8001d1e <_malloc_r+0x72>
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	42a2      	cmp	r2, r4
 8001d18:	bf0c      	ite	eq
 8001d1a:	600b      	streq	r3, [r1, #0]
 8001d1c:	6053      	strne	r3, [r2, #4]
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f000 f85a 	bl	8001dd8 <__malloc_unlock>
 8001d24:	f104 000b 	add.w	r0, r4, #11
 8001d28:	1d23      	adds	r3, r4, #4
 8001d2a:	f020 0007 	bic.w	r0, r0, #7
 8001d2e:	1ac2      	subs	r2, r0, r3
 8001d30:	d0cc      	beq.n	8001ccc <_malloc_r+0x20>
 8001d32:	1a1b      	subs	r3, r3, r0
 8001d34:	50a3      	str	r3, [r4, r2]
 8001d36:	e7c9      	b.n	8001ccc <_malloc_r+0x20>
 8001d38:	4622      	mov	r2, r4
 8001d3a:	6864      	ldr	r4, [r4, #4]
 8001d3c:	e7cc      	b.n	8001cd8 <_malloc_r+0x2c>
 8001d3e:	1cc4      	adds	r4, r0, #3
 8001d40:	f024 0403 	bic.w	r4, r4, #3
 8001d44:	42a0      	cmp	r0, r4
 8001d46:	d0e3      	beq.n	8001d10 <_malloc_r+0x64>
 8001d48:	1a21      	subs	r1, r4, r0
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f000 f82e 	bl	8001dac <_sbrk_r>
 8001d50:	3001      	adds	r0, #1
 8001d52:	d1dd      	bne.n	8001d10 <_malloc_r+0x64>
 8001d54:	e7cf      	b.n	8001cf6 <_malloc_r+0x4a>
 8001d56:	bf00      	nop
 8001d58:	20000090 	.word	0x20000090
 8001d5c:	20000094 	.word	0x20000094

08001d60 <_realloc_r>:
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	4607      	mov	r7, r0
 8001d64:	4614      	mov	r4, r2
 8001d66:	460e      	mov	r6, r1
 8001d68:	b921      	cbnz	r1, 8001d74 <_realloc_r+0x14>
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d70:	f7ff bf9c 	b.w	8001cac <_malloc_r>
 8001d74:	b922      	cbnz	r2, 8001d80 <_realloc_r+0x20>
 8001d76:	f7ff ff4d 	bl	8001c14 <_free_r>
 8001d7a:	4625      	mov	r5, r4
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d80:	f000 f830 	bl	8001de4 <_malloc_usable_size_r>
 8001d84:	42a0      	cmp	r0, r4
 8001d86:	d20f      	bcs.n	8001da8 <_realloc_r+0x48>
 8001d88:	4621      	mov	r1, r4
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	f7ff ff8e 	bl	8001cac <_malloc_r>
 8001d90:	4605      	mov	r5, r0
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d0f2      	beq.n	8001d7c <_realloc_r+0x1c>
 8001d96:	4631      	mov	r1, r6
 8001d98:	4622      	mov	r2, r4
 8001d9a:	f7ff ff13 	bl	8001bc4 <memcpy>
 8001d9e:	4631      	mov	r1, r6
 8001da0:	4638      	mov	r0, r7
 8001da2:	f7ff ff37 	bl	8001c14 <_free_r>
 8001da6:	e7e9      	b.n	8001d7c <_realloc_r+0x1c>
 8001da8:	4635      	mov	r5, r6
 8001daa:	e7e7      	b.n	8001d7c <_realloc_r+0x1c>

08001dac <_sbrk_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	2300      	movs	r3, #0
 8001db0:	4d05      	ldr	r5, [pc, #20]	; (8001dc8 <_sbrk_r+0x1c>)
 8001db2:	4604      	mov	r4, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	602b      	str	r3, [r5, #0]
 8001db8:	f7fe fc62 	bl	8000680 <_sbrk>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk_r+0x1a>
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	b103      	cbz	r3, 8001dc6 <_sbrk_r+0x1a>
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	bd38      	pop	{r3, r4, r5, pc}
 8001dc8:	2000009c 	.word	0x2000009c

08001dcc <__malloc_lock>:
 8001dcc:	4801      	ldr	r0, [pc, #4]	; (8001dd4 <__malloc_lock+0x8>)
 8001dce:	f000 b811 	b.w	8001df4 <__retarget_lock_acquire_recursive>
 8001dd2:	bf00      	nop
 8001dd4:	200000a4 	.word	0x200000a4

08001dd8 <__malloc_unlock>:
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <__malloc_unlock+0x8>)
 8001dda:	f000 b80c 	b.w	8001df6 <__retarget_lock_release_recursive>
 8001dde:	bf00      	nop
 8001de0:	200000a4 	.word	0x200000a4

08001de4 <_malloc_usable_size_r>:
 8001de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001de8:	1f18      	subs	r0, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bfbc      	itt	lt
 8001dee:	580b      	ldrlt	r3, [r1, r0]
 8001df0:	18c0      	addlt	r0, r0, r3
 8001df2:	4770      	bx	lr

08001df4 <__retarget_lock_acquire_recursive>:
 8001df4:	4770      	bx	lr

08001df6 <__retarget_lock_release_recursive>:
 8001df6:	4770      	bx	lr

08001df8 <_init>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr

08001e04 <_fini>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr
