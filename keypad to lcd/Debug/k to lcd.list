
k to lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002354  08002354  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002354  08002354  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002354  08002354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800235c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000070  080023cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080023cc  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000549e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001381  00000000  00000000  00025537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  000268b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00026d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c48  00000000  00000000  000270f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057d5  00000000  00000000  0003dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000802fc  00000000  00000000  0004350d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001374  00000000  00000000  000c385c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080022bc 	.word	0x080022bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080022bc 	.word	0x080022bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f86f 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f86b 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f867 	bl	80002a8 <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f862 	bl	80002a8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f85e 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f85a 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f856 	bl	80002a8 <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	4906      	ldr	r1, [pc, #24]	; (8000230 <Lcd_int+0x2c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fc16 	bl	8001a48 <siprintf>

	Lcd_string(lcd, buffer);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f806 	bl	8000234 <Lcd_string>
}
 8000228:	bf00      	nop
 800022a:	3718      	adds	r7, #24
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	080022d4 	.word	0x080022d4

08000234 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
 8000242:	e00a      	b.n	800025a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f858 	bl	8000304 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	7bfc      	ldrb	r4, [r7, #15]
 800025c:	6838      	ldr	r0, [r7, #0]
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	429c      	cmp	r4, r3
 8000266:	d3ed      	bcc.n	8000244 <Lcd_string+0x10>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bd90      	pop	{r4, r7, pc}
	...

08000274 <Lcd_cursor>:
}
/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
 8000280:	4613      	mov	r3, r2
 8000282:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <Lcd_cursor+0x30>)
 8000288:	5cd2      	ldrb	r2, [r2, r3]
 800028a:	78bb      	ldrb	r3, [r7, #2]
 800028c:	4413      	add	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	3b80      	subs	r3, #128	; 0x80
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f806 	bl	80002a8 <lcd_write_command>
	#endif
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	0800230c 	.word	0x0800230c

080002a8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	899b      	ldrh	r3, [r3, #12]
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 ff77 	bl	80011b2 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7d9b      	ldrb	r3, [r3, #22]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d111      	bne.n	80002f0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	091b      	lsrs	r3, r3, #4
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2204      	movs	r2, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f000 f842 	bl	8000360 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2204      	movs	r2, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f839 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002ee:	e005      	b.n	80002fc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2208      	movs	r2, #8
 80002f4:	4619      	mov	r1, r3
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 f832 	bl	8000360 <lcd_write>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6898      	ldr	r0, [r3, #8]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	899b      	ldrh	r3, [r3, #12]
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	f000 ff49 	bl	80011b2 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7d9b      	ldrb	r3, [r3, #22]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2204      	movs	r2, #4
 8000330:	4619      	mov	r1, r3
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 f814 	bl	8000360 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2204      	movs	r2, #4
 8000342:	4619      	mov	r1, r3
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f000 f80b 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800034a:	e005      	b.n	8000358 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2208      	movs	r2, #8
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f804 	bl	8000360 <lcd_write>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	4613      	mov	r3, r2
 800036e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e019      	b.n	80003aa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	8819      	ldrh	r1, [r3, #0]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	fa42 f303 	asr.w	r3, r2, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	f000 ff07 	bl	80011b2 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	3301      	adds	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	7bfa      	ldrb	r2, [r7, #15]
 80003ac:	78bb      	ldrb	r3, [r7, #2]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d3e1      	bcc.n	8000376 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6918      	ldr	r0, [r3, #16]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	8a9b      	ldrh	r3, [r3, #20]
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	f000 fef8 	bl	80011b2 <HAL_GPIO_WritePin>
	DELAY(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fc28 	bl	8000c18 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6918      	ldr	r0, [r3, #16]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	8a9b      	ldrh	r3, [r3, #20]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	f000 feed 	bl	80011b2 <HAL_GPIO_WritePin>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b5b0      	push	{r4, r5, r7, lr}
 80003e2:	b096      	sub	sp, #88	; 0x58
 80003e4:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


HAL_Init();
 80003e6:	f000 fbb5 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ea:	f000 f88b 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ee:	f000 f8c5 	bl	800057c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f8:	483b      	ldr	r0, [pc, #236]	; (80004e8 <main+0x108>)
 80003fa:	f000 feda 	bl	80011b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	2108      	movs	r1, #8
 8000402:	483a      	ldr	r0, [pc, #232]	; (80004ec <main+0x10c>)
 8000404:	f000 fed5 	bl	80011b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	4837      	ldr	r0, [pc, #220]	; (80004ec <main+0x10c>)
 800040e:	f000 fed0 	bl	80011b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	2120      	movs	r1, #32
 8000416:	4835      	ldr	r0, [pc, #212]	; (80004ec <main+0x10c>)
 8000418:	f000 fecb 	bl	80011b2 <HAL_GPIO_WritePin>
  Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 800041c:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <main+0x110>)
 800041e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000428:	4a32      	ldr	r2, [pc, #200]	; (80004f4 <main+0x114>)
 800042a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000432:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_2, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000436:	4638      	mov	r0, r7
 8000438:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800043c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000440:	2300      	movs	r3, #0
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	2308      	movs	r3, #8
 8000446:	9302      	str	r3, [sp, #8]
 8000448:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <main+0x108>)
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	2304      	movs	r3, #4
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <main+0x108>)
 8000452:	f7ff fe83 	bl	800015c <Lcd_create>
 8000456:	f107 0418 	add.w	r4, r7, #24
 800045a:	463d      	mov	r5, r7
 800045c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000460:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000464:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0,6);
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	2206      	movs	r2, #6
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff feff 	bl	8000274 <Lcd_cursor>
  Lcd_string(&lcd, "KEY PRESSED");
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	491f      	ldr	r1, [pc, #124]	; (80004f8 <main+0x118>)
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fed9 	bl	8000234 <Lcd_string>
  Lcd_cursor(&lcd, 1,7);
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	2207      	movs	r2, #7
 8000488:	2101      	movs	r1, #1
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fef2 	bl	8000274 <Lcd_cursor>
  HAL_Delay(2000);
 8000490:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000494:	f000 fbc0 	bl	8000c18 <HAL_Delay>
   {
   Lcd_cursor(&lcd, 1,7);
   Lcd_int(&lcd, x);
   HAL_Delay (1000);
   }*/
 if(a==1)
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <main+0x11c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d1fb      	bne.n	8000498 <main+0xb8>
 {
 Lcd_cursor(&lcd, 0,0);
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fee3 	bl	8000274 <Lcd_cursor>
 Lcd_string(&lcd, keyPressed);
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <main+0x120>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
 80004b4:	f107 0318 	add.w	r3, r7, #24
 80004b8:	4611      	mov	r1, r2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff feba 	bl	8000234 <Lcd_string>
 Lcd_cursor(&lcd, 1,0);
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	2200      	movs	r2, #0
 80004c6:	2101      	movs	r1, #1
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fed3 	bl	8000274 <Lcd_cursor>
 Lcd_int(&lcd, keyPressed);
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <main+0x120>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	461a      	mov	r2, r3
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fe92 	bl	8000204 <Lcd_int>
 a=0;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <main+0x11c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 if(a==1)
 80004e6:	e7d7      	b.n	8000498 <main+0xb8>
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40010c00 	.word	0x40010c00
 80004f0:	080022e4 	.word	0x080022e4
 80004f4:	080022f4 	.word	0x080022f4
 80004f8:	080022d8 	.word	0x080022d8
 80004fc:	200000a8 	.word	0x200000a8
 8000500:	200000a4 	.word	0x200000a4

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fa90 	bl	8001a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	2301      	movs	r3, #1
 800052c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2310      	movs	r3, #16
 8000530:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	2300      	movs	r3, #0
 8000534:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fe6a 	bl	8001214 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000546:	f000 fa31 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 f8d6 	bl	8001714 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800056e:	f000 fa1d 	bl	80009ac <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3740      	adds	r7, #64	; 0x40
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0xcc>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <MX_GPIO_Init+0xcc>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0xcc>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_GPIO_Init+0xcc>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a26      	ldr	r2, [pc, #152]	; (8000648 <MX_GPIO_Init+0xcc>)
 80005ae:	f043 0308 	orr.w	r3, r3, #8
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_GPIO_Init+0xcc>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f248 010c 	movw	r1, #32780	; 0x800c
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <MX_GPIO_Init+0xd0>)
 80005c8:	f000 fdf3 	bl	80011b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80005cc:	2200      	movs	r2, #0
 80005ce:	f640 413b 	movw	r1, #3131	; 0xc3b
 80005d2:	481f      	ldr	r0, [pc, #124]	; (8000650 <MX_GPIO_Init+0xd4>)
 80005d4:	f000 fded 	bl	80011b2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80005d8:	f248 030c 	movw	r3, #32780	; 0x800c
 80005dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	4619      	mov	r1, r3
 80005f0:	4816      	ldr	r0, [pc, #88]	; (800064c <MX_GPIO_Init+0xd0>)
 80005f2:	f000 fc43 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80005f6:	f640 433b 	movw	r3, #3131	; 0xc3b
 80005fa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	4619      	mov	r1, r3
 800060e:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_GPIO_Init+0xd4>)
 8000610:	f000 fc34 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000614:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0xd8>)
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <MX_GPIO_Init+0xd4>)
 800062a:	f000 fc27 	bl	8000e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2017      	movs	r0, #23
 8000634:	f000 fbeb 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000638:	2017      	movs	r0, #23
 800063a:	f000 fc04 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	10110000 	.word	0x10110000

08000658 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8000662:	f000 facf 	bl	8000c04 <HAL_GetTick>
 8000666:	4603      	mov	r3, r0
 8000668:	4aa7      	ldr	r2, [pc, #668]	; (8000908 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800066a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 800066c:	4ba6      	ldr	r3, [pc, #664]	; (8000908 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4ba6      	ldr	r3, [pc, #664]	; (800090c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	2b0a      	cmp	r3, #10
 8000678:	f240 8186 	bls.w	8000988 <HAL_GPIO_EXTI_Callback+0x330>
 a=1;
 800067c:	4ba4      	ldr	r3, [pc, #656]	; (8000910 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000682:	4ba4      	ldr	r3, [pc, #656]	; (8000914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000684:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000688:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800068a:	4ba2      	ldr	r3, [pc, #648]	; (8000914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000690:	4ba0      	ldr	r3, [pc, #640]	; (8000914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	4b9f      	ldr	r3, [pc, #636]	; (8000914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000698:	2202      	movs	r2, #2
 800069a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800069c:	499d      	ldr	r1, [pc, #628]	; (8000914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800069e:	489e      	ldr	r0, [pc, #632]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006a0:	f000 fbec 	bl	8000e7c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	489c      	ldr	r0, [pc, #624]	; (800091c <HAL_GPIO_EXTI_Callback+0x2c4>)
 80006ac:	f000 fd81 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	4898      	ldr	r0, [pc, #608]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006b6:	f000 fd7c 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	4896      	ldr	r0, [pc, #600]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006c0:	f000 fd77 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	4893      	ldr	r0, [pc, #588]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006ca:	f000 fd72 	bl	80011b2 <HAL_GPIO_WritePin>

    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b40      	cmp	r3, #64	; 0x40
 80006d2:	d10a      	bne.n	80006ea <HAL_GPIO_EXTI_Callback+0x92>
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	4890      	ldr	r0, [pc, #576]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006d8:	f000 fd54 	bl	8001184 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <HAL_GPIO_EXTI_Callback+0x92>
    {
      keyPressed = 68; //ASCII value of D
 80006e2:	4b8f      	ldr	r3, [pc, #572]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80006e4:	2244      	movs	r2, #68	; 0x44
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e02c      	b.n	8000744 <HAL_GPIO_EXTI_Callback+0xec>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	2b80      	cmp	r3, #128	; 0x80
 80006ee:	d10a      	bne.n	8000706 <HAL_GPIO_EXTI_Callback+0xae>
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	4889      	ldr	r0, [pc, #548]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006f4:	f000 fd46 	bl	8001184 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <HAL_GPIO_EXTI_Callback+0xae>
    {
      keyPressed = 67; //ASCII value of C
 80006fe:	4b88      	ldr	r3, [pc, #544]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000700:	2243      	movs	r2, #67	; 0x43
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e01e      	b.n	8000744 <HAL_GPIO_EXTI_Callback+0xec>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800070c:	d10b      	bne.n	8000726 <HAL_GPIO_EXTI_Callback+0xce>
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4881      	ldr	r0, [pc, #516]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000714:	f000 fd36 	bl	8001184 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <HAL_GPIO_EXTI_Callback+0xce>
    {
      keyPressed = 66; //ASCII value of B
 800071e:	4b80      	ldr	r3, [pc, #512]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000720:	2242      	movs	r2, #66	; 0x42
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e00e      	b.n	8000744 <HAL_GPIO_EXTI_Callback+0xec>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800072c:	d10a      	bne.n	8000744 <HAL_GPIO_EXTI_Callback+0xec>
 800072e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000732:	4879      	ldr	r0, [pc, #484]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000734:	f000 fd26 	bl	8001184 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <HAL_GPIO_EXTI_Callback+0xec>
    {
      keyPressed = 65; //ASCII value of A
 800073e:	4b78      	ldr	r3, [pc, #480]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000740:	2241      	movs	r2, #65	; 0x41
 8000742:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	4874      	ldr	r0, [pc, #464]	; (800091c <HAL_GPIO_EXTI_Callback+0x2c4>)
 800074c:	f000 fd31 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	2108      	movs	r1, #8
 8000754:	4870      	ldr	r0, [pc, #448]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000756:	f000 fd2c 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	486e      	ldr	r0, [pc, #440]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000760:	f000 fd27 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2120      	movs	r1, #32
 8000768:	486b      	ldr	r0, [pc, #428]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800076a:	f000 fd22 	bl	80011b2 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	2b40      	cmp	r3, #64	; 0x40
 8000772:	d10a      	bne.n	800078a <HAL_GPIO_EXTI_Callback+0x132>
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4868      	ldr	r0, [pc, #416]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000778:	f000 fd04 	bl	8001184 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <HAL_GPIO_EXTI_Callback+0x132>
    {
      keyPressed = 35; //ASCII value of #
 8000782:	4b67      	ldr	r3, [pc, #412]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000784:	2223      	movs	r2, #35	; 0x23
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e02c      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x18c>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b80      	cmp	r3, #128	; 0x80
 800078e:	d10a      	bne.n	80007a6 <HAL_GPIO_EXTI_Callback+0x14e>
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	4861      	ldr	r0, [pc, #388]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000794:	f000 fcf6 	bl	8001184 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <HAL_GPIO_EXTI_Callback+0x14e>
    {
      keyPressed = 57; //ASCII value of 9
 800079e:	4b60      	ldr	r3, [pc, #384]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80007a0:	2239      	movs	r2, #57	; 0x39
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e01e      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x18c>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007ac:	d10b      	bne.n	80007c6 <HAL_GPIO_EXTI_Callback+0x16e>
 80007ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b2:	4859      	ldr	r0, [pc, #356]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80007b4:	f000 fce6 	bl	8001184 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <HAL_GPIO_EXTI_Callback+0x16e>
    {
      keyPressed = 54; //ASCII value of 6
 80007be:	4b58      	ldr	r3, [pc, #352]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80007c0:	2236      	movs	r2, #54	; 0x36
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e00e      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x18c>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007cc:	d10a      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x18c>
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4851      	ldr	r0, [pc, #324]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80007d4:	f000 fcd6 	bl	8001184 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_GPIO_EXTI_Callback+0x18c>
    {
      keyPressed = 51; //ASCII value of 3
 80007de:	4b50      	ldr	r3, [pc, #320]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80007e0:	2233      	movs	r2, #51	; 0x33
 80007e2:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ea:	484c      	ldr	r0, [pc, #304]	; (800091c <HAL_GPIO_EXTI_Callback+0x2c4>)
 80007ec:	f000 fce1 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2108      	movs	r1, #8
 80007f4:	4848      	ldr	r0, [pc, #288]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80007f6:	f000 fcdc 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	4846      	ldr	r0, [pc, #280]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000800:	f000 fcd7 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	4843      	ldr	r0, [pc, #268]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800080a:	f000 fcd2 	bl	80011b2 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d10a      	bne.n	800082a <HAL_GPIO_EXTI_Callback+0x1d2>
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4840      	ldr	r0, [pc, #256]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000818:	f000 fcb4 	bl	8001184 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <HAL_GPIO_EXTI_Callback+0x1d2>
    {
      keyPressed = 48; //ASCII value of 0
 8000822:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000824:	2230      	movs	r2, #48	; 0x30
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e02c      	b.n	8000884 <HAL_GPIO_EXTI_Callback+0x22c>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	2b80      	cmp	r3, #128	; 0x80
 800082e:	d10a      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0x1ee>
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	4839      	ldr	r0, [pc, #228]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000834:	f000 fca6 	bl	8001184 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_EXTI_Callback+0x1ee>
    {
      keyPressed = 56; //ASCII value of 8
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000840:	2238      	movs	r2, #56	; 0x38
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	e01e      	b.n	8000884 <HAL_GPIO_EXTI_Callback+0x22c>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800084c:	d10b      	bne.n	8000866 <HAL_GPIO_EXTI_Callback+0x20e>
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4831      	ldr	r0, [pc, #196]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000854:	f000 fc96 	bl	8001184 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_EXTI_Callback+0x20e>
    {
      keyPressed = 53; //ASCII value of 5
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000860:	2235      	movs	r2, #53	; 0x35
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e00e      	b.n	8000884 <HAL_GPIO_EXTI_Callback+0x22c>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086c:	d10a      	bne.n	8000884 <HAL_GPIO_EXTI_Callback+0x22c>
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	4829      	ldr	r0, [pc, #164]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000874:	f000 fc86 	bl	8001184 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <HAL_GPIO_EXTI_Callback+0x22c>
    {
      keyPressed = 50; //ASCII value of 2
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000880:	2232      	movs	r2, #50	; 0x32
 8000882:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	4824      	ldr	r0, [pc, #144]	; (800091c <HAL_GPIO_EXTI_Callback+0x2c4>)
 800088c:	f000 fc91 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2108      	movs	r1, #8
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000896:	f000 fc8c 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	481e      	ldr	r0, [pc, #120]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80008a0:	f000 fc87 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2120      	movs	r1, #32
 80008a8:	481b      	ldr	r0, [pc, #108]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80008aa:	f000 fc82 	bl	80011b2 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	2b40      	cmp	r3, #64	; 0x40
 80008b2:	d10a      	bne.n	80008ca <HAL_GPIO_EXTI_Callback+0x272>
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	4818      	ldr	r0, [pc, #96]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80008b8:	f000 fc64 	bl	8001184 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <HAL_GPIO_EXTI_Callback+0x272>
    {
      keyPressed = 42; //ASCII value of *
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80008c4:	222a      	movs	r2, #42	; 0x2a
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e03b      	b.n	8000942 <HAL_GPIO_EXTI_Callback+0x2ea>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	2b80      	cmp	r3, #128	; 0x80
 80008ce:	d10a      	bne.n	80008e6 <HAL_GPIO_EXTI_Callback+0x28e>
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80008d4:	f000 fc56 	bl	8001184 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d003      	beq.n	80008e6 <HAL_GPIO_EXTI_Callback+0x28e>
    {
      keyPressed = 55; //ASCII value of 7
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80008e0:	2237      	movs	r2, #55	; 0x37
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e02d      	b.n	8000942 <HAL_GPIO_EXTI_Callback+0x2ea>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ec:	d11a      	bne.n	8000924 <HAL_GPIO_EXTI_Callback+0x2cc>
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80008f4:	f000 fc46 	bl	8001184 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d012      	beq.n	8000924 <HAL_GPIO_EXTI_Callback+0x2cc>
    {
      keyPressed = 52; //ASCII value of 4
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000900:	2234      	movs	r2, #52	; 0x34
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e01d      	b.n	8000942 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000906:	bf00      	nop
 8000908:	200000a0 	.word	0x200000a0
 800090c:	2000009c 	.word	0x2000009c
 8000910:	200000a8 	.word	0x200000a8
 8000914:	2000008c 	.word	0x2000008c
 8000918:	40010c00 	.word	0x40010c00
 800091c:	40010800 	.word	0x40010800
 8000920:	200000a4 	.word	0x200000a4
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800092a:	d10a      	bne.n	8000942 <HAL_GPIO_EXTI_Callback+0x2ea>
 800092c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000930:	4817      	ldr	r0, [pc, #92]	; (8000990 <HAL_GPIO_EXTI_Callback+0x338>)
 8000932:	f000 fc27 	bl	8001184 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <HAL_GPIO_EXTI_Callback+0x2ea>
    {
      keyPressed = 49; //ASCII value of 1
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_GPIO_EXTI_Callback+0x33c>)
 800093e:	2231      	movs	r2, #49	; 0x31
 8000940:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <HAL_GPIO_EXTI_Callback+0x340>)
 800094a:	f000 fc32 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <HAL_GPIO_EXTI_Callback+0x338>)
 8000954:	f000 fc2d 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_GPIO_EXTI_Callback+0x338>)
 800095e:	f000 fc28 	bl	80011b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <HAL_GPIO_EXTI_Callback+0x338>)
 8000968:	f000 fc23 	bl	80011b2 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_GPIO_EXTI_Callback+0x344>)
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x348>)
 8000970:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_GPIO_EXTI_Callback+0x344>)
 8000974:	2202      	movs	r2, #2
 8000976:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000978:	4908      	ldr	r1, [pc, #32]	; (800099c <HAL_GPIO_EXTI_Callback+0x344>)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_GPIO_EXTI_Callback+0x338>)
 800097c:	f000 fa7e 	bl	8000e7c <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x34c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x350>)
 8000986:	6013      	str	r3, [r2, #0]
  }
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40010c00 	.word	0x40010c00
 8000994:	200000a4 	.word	0x200000a4
 8000998:	40010800 	.word	0x40010800
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	10110000 	.word	0x10110000
 80009a4:	200000a0 	.word	0x200000a0
 80009a8:	2000009c 	.word	0x2000009c

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x5c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_MspInit+0x60>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_MspInit+0x60>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f8bd 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a6e:	2040      	movs	r0, #64	; 0x40
 8000a70:	f000 fbb8 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a74:	2080      	movs	r0, #128	; 0x80
 8000a76:	f000 fbb5 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a7e:	f000 fbb1 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a86:	f000 fbad 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f000 ff90 	bl	80019e4 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20005000 	.word	0x20005000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	200000ac 	.word	0x200000ac
 8000af8:	200000d0 	.word	0x200000d0

08000afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2e:	f7ff ffe5 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f000 ff5d 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fc53 	bl	80003e0 <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b44:	0800235c 	.word	0x0800235c
  ldr r2, =_sbss
 8000b48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b4c:	200000cc 	.word	0x200000cc

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f947 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff ff22 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f95f 	bl	8000e62 <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f927 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200000b8 	.word	0x200000b8

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	200000b8 	.word	0x200000b8

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4906      	ldr	r1, [pc, #24]	; (8000cf8 <__NVIC_EnableIRQ+0x34>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff90 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff2d 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff42 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff35 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b08b      	sub	sp, #44	; 0x2c
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e169      	b.n	8001164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e90:	2201      	movs	r2, #1
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8158 	bne.w	800115e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4a9a      	ldr	r2, [pc, #616]	; (800111c <HAL_GPIO_Init+0x2a0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d05e      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a98      	ldr	r2, [pc, #608]	; (800111c <HAL_GPIO_Init+0x2a0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d875      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ebe:	4a98      	ldr	r2, [pc, #608]	; (8001120 <HAL_GPIO_Init+0x2a4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d058      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a96      	ldr	r2, [pc, #600]	; (8001120 <HAL_GPIO_Init+0x2a4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d86f      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000eca:	4a96      	ldr	r2, [pc, #600]	; (8001124 <HAL_GPIO_Init+0x2a8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d052      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000ed0:	4a94      	ldr	r2, [pc, #592]	; (8001124 <HAL_GPIO_Init+0x2a8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d869      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ed6:	4a94      	ldr	r2, [pc, #592]	; (8001128 <HAL_GPIO_Init+0x2ac>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d04c      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000edc:	4a92      	ldr	r2, [pc, #584]	; (8001128 <HAL_GPIO_Init+0x2ac>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d863      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ee2:	4a92      	ldr	r2, [pc, #584]	; (800112c <HAL_GPIO_Init+0x2b0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d046      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a90      	ldr	r2, [pc, #576]	; (800112c <HAL_GPIO_Init+0x2b0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d85d      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000eee:	2b12      	cmp	r3, #18
 8000ef0:	d82a      	bhi.n	8000f48 <HAL_GPIO_Init+0xcc>
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d859      	bhi.n	8000faa <HAL_GPIO_Init+0x12e>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <HAL_GPIO_Init+0x80>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f77 	.word	0x08000f77
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f63 	.word	0x08000f63
 8000f08:	08000fa5 	.word	0x08000fa5
 8000f0c:	08000fab 	.word	0x08000fab
 8000f10:	08000fab 	.word	0x08000fab
 8000f14:	08000fab 	.word	0x08000fab
 8000f18:	08000fab 	.word	0x08000fab
 8000f1c:	08000fab 	.word	0x08000fab
 8000f20:	08000fab 	.word	0x08000fab
 8000f24:	08000fab 	.word	0x08000fab
 8000f28:	08000fab 	.word	0x08000fab
 8000f2c:	08000fab 	.word	0x08000fab
 8000f30:	08000fab 	.word	0x08000fab
 8000f34:	08000fab 	.word	0x08000fab
 8000f38:	08000fab 	.word	0x08000fab
 8000f3c:	08000fab 	.word	0x08000fab
 8000f40:	08000f59 	.word	0x08000f59
 8000f44:	08000f6d 	.word	0x08000f6d
 8000f48:	4a79      	ldr	r2, [pc, #484]	; (8001130 <HAL_GPIO_Init+0x2b4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f4e:	e02c      	b.n	8000faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	623b      	str	r3, [r7, #32]
          break;
 8000f56:	e029      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	e024      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	3308      	adds	r3, #8
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e01f      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	330c      	adds	r3, #12
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e01a      	b.n	8000fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	623b      	str	r3, [r7, #32]
          break;
 8000f82:	e013      	b.n	8000fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d105      	bne.n	8000f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	611a      	str	r2, [r3, #16]
          break;
 8000f96:	e009      	b.n	8000fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	615a      	str	r2, [r3, #20]
          break;
 8000fa2:	e003      	b.n	8000fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
          break;
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x130>
          break;
 8000faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2bff      	cmp	r3, #255	; 0xff
 8000fb0:	d801      	bhi.n	8000fb6 <HAL_GPIO_Init+0x13a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	e001      	b.n	8000fba <HAL_GPIO_Init+0x13e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2bff      	cmp	r3, #255	; 0xff
 8000fc0:	d802      	bhi.n	8000fc8 <HAL_GPIO_Init+0x14c>
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x152>
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	3b08      	subs	r3, #8
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	6a39      	ldr	r1, [r7, #32]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 80b1 	beq.w	800115e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffc:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x2b8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_GPIO_Init+0x2b8>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <HAL_GPIO_Init+0x2b8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001014:	4a48      	ldr	r2, [pc, #288]	; (8001138 <HAL_GPIO_Init+0x2bc>)
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a40      	ldr	r2, [pc, #256]	; (800113c <HAL_GPIO_Init+0x2c0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d013      	beq.n	8001068 <HAL_GPIO_Init+0x1ec>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a3f      	ldr	r2, [pc, #252]	; (8001140 <HAL_GPIO_Init+0x2c4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d00d      	beq.n	8001064 <HAL_GPIO_Init+0x1e8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a3e      	ldr	r2, [pc, #248]	; (8001144 <HAL_GPIO_Init+0x2c8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x1e4>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <HAL_GPIO_Init+0x2cc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_GPIO_Init+0x1e0>
 8001058:	2303      	movs	r3, #3
 800105a:	e006      	b.n	800106a <HAL_GPIO_Init+0x1ee>
 800105c:	2304      	movs	r3, #4
 800105e:	e004      	b.n	800106a <HAL_GPIO_Init+0x1ee>
 8001060:	2302      	movs	r3, #2
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0x1ee>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <HAL_GPIO_Init+0x1ee>
 8001068:	2300      	movs	r3, #0
 800106a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106c:	f002 0203 	and.w	r2, r2, #3
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	4093      	lsls	r3, r2
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107a:	492f      	ldr	r1, [pc, #188]	; (8001138 <HAL_GPIO_Init+0x2bc>)
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	492c      	ldr	r1, [pc, #176]	; (800114c <HAL_GPIO_Init+0x2d0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4928      	ldr	r1, [pc, #160]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4922      	ldr	r1, [pc, #136]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	491e      	ldr	r1, [pc, #120]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	4918      	ldr	r1, [pc, #96]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4914      	ldr	r1, [pc, #80]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d021      	beq.n	8001150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_GPIO_Init+0x2d0>)
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	490e      	ldr	r1, [pc, #56]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	60cb      	str	r3, [r1, #12]
 8001118:	e021      	b.n	800115e <HAL_GPIO_Init+0x2e2>
 800111a:	bf00      	nop
 800111c:	10320000 	.word	0x10320000
 8001120:	10310000 	.word	0x10310000
 8001124:	10220000 	.word	0x10220000
 8001128:	10210000 	.word	0x10210000
 800112c:	10120000 	.word	0x10120000
 8001130:	10110000 	.word	0x10110000
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000
 800113c:	40010800 	.word	0x40010800
 8001140:	40010c00 	.word	0x40010c00
 8001144:	40011000 	.word	0x40011000
 8001148:	40011400 	.word	0x40011400
 800114c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	43db      	mvns	r3, r3
 8001158:	4909      	ldr	r1, [pc, #36]	; (8001180 <HAL_GPIO_Init+0x304>)
 800115a:	4013      	ands	r3, r2
 800115c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3301      	adds	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	fa22 f303 	lsr.w	r3, r2, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	f47f ae8e 	bne.w	8000e90 <HAL_GPIO_Init+0x14>
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	372c      	adds	r7, #44	; 0x2c
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c2:	787b      	ldrb	r3, [r7, #1]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	041a      	lsls	r2, r3, #16
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	611a      	str	r2, [r3, #16]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fa28 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e26c      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8087 	beq.w	8001342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00c      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d112      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06c      	beq.n	8001340 <HAL_RCC_OscConfig+0x12c>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d168      	bne.n	8001340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e246      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x76>
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a7f      	ldr	r2, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e02e      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a77      	ldr	r2, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a71      	ldr	r2, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012d0:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc88 	bl	8000c04 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc84 	bl	8000c04 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1fa      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe4>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc74 	bl	8000c04 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc70 	bl	8000c04 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1e6      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x10c>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1ba      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4939      	ldr	r1, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc29 	bl	8000c04 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc25 	bl	8000c04 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e19b      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc08 	bl	8000c04 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc04 	bl	8000c04 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e17a      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03a      	beq.n	8001498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fbe8 	bl	8000c04 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fbe4 	bl	8000c04 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e15a      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f000 faa6 	bl	80019a8 <RCC_Delay>
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fbce 	bl	8000c04 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fbca 	bl	8000c04 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d908      	bls.n	800148c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e140      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	42420000 	.word	0x42420000
 8001488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b9e      	ldr	r3, [pc, #632]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a6 	beq.w	80015f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b97      	ldr	r3, [pc, #604]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b94      	ldr	r3, [pc, #592]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a93      	ldr	r2, [pc, #588]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b91      	ldr	r3, [pc, #580]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b8e      	ldr	r3, [pc, #568]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb8b 	bl	8000c04 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fb87 	bl	8000c04 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0fd      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e02d      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x334>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x356>
 8001550:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a69      	ldr	r2, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a66      	ldr	r2, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb3b 	bl	8000c04 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fb37 	bl	8000c04 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0ab      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x37e>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb25 	bl	8000c04 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fb21 	bl	8000c04 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e095      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8081 	beq.w	80016fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d061      	beq.n	80016cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d146      	bne.n	800169e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faf5 	bl	8000c04 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff faf1 	bl	8000c04 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e067      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	492d      	ldr	r1, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a19      	ldr	r1, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	430b      	orrs	r3, r1
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fac5 	bl	8000c04 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fac1 	bl	8000c04 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e037      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
 800169c:	e02f      	b.n	80016fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff faae 	bl	8000c04 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff faaa 	bl	8000c04 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e020      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x498>
 80016ca:	e018      	b.n	80016fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	42420060 	.word	0x42420060

08001714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d0      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d910      	bls.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0207 	bic.w	r2, r3, #7
 800173e:	4965      	ldr	r1, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d040      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e073      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06b      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4936      	ldr	r1, [pc, #216]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff f9fe 	bl	8000c04 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f9fa 	bl	8000c04 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e053      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d210      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4922      	ldr	r1, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	5ccb      	ldrb	r3, [r1, r3]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1cc>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f95c 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08002310 	.word	0x08002310
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b490      	push	{r4, r7}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f0:	1d3c      	adds	r4, r7, #4
 80018f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f8:	f240 2301 	movw	r3, #513	; 0x201
 80018fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x40>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x46>
 8001926:	e02d      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	e02d      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193a:	4413      	add	r3, r2
 800193c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001940:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c5b      	lsrs	r3, r3, #17
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800195a:	4413      	add	r3, r2
 800195c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001966:	fb02 f203 	mul.w	r2, r2, r3
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e004      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	623b      	str	r3, [r7, #32]
      break;
 8001982:	e002      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001986:	623b      	str	r3, [r7, #32]
      break;
 8001988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198a:	6a3b      	ldr	r3, [r7, #32]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bc90      	pop	{r4, r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	080022fc 	.word	0x080022fc
 800199c:	40021000 	.word	0x40021000
 80019a0:	007a1200 	.word	0x007a1200
 80019a4:	003d0900 	.word	0x003d0900

080019a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <RCC_Delay+0x34>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <RCC_Delay+0x38>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0a5b      	lsrs	r3, r3, #9
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019c4:	bf00      	nop
  }
  while (Delay --);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f9      	bne.n	80019c4 <RCC_Delay+0x1c>
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000000 	.word	0x20000000
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <__errno>:
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <__errno+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	2600      	movs	r6, #0
 80019f4:	4d0c      	ldr	r5, [pc, #48]	; (8001a28 <__libc_init_array+0x38>)
 80019f6:	4c0d      	ldr	r4, [pc, #52]	; (8001a2c <__libc_init_array+0x3c>)
 80019f8:	1b64      	subs	r4, r4, r5
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	42a6      	cmp	r6, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	f000 fc5c 	bl	80022bc <_init>
 8001a04:	2600      	movs	r6, #0
 8001a06:	4d0a      	ldr	r5, [pc, #40]	; (8001a30 <__libc_init_array+0x40>)
 8001a08:	4c0a      	ldr	r4, [pc, #40]	; (8001a34 <__libc_init_array+0x44>)
 8001a0a:	1b64      	subs	r4, r4, r5
 8001a0c:	10a4      	asrs	r4, r4, #2
 8001a0e:	42a6      	cmp	r6, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a18:	4798      	blx	r3
 8001a1a:	3601      	adds	r6, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a22:	4798      	blx	r3
 8001a24:	3601      	adds	r6, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	08002354 	.word	0x08002354
 8001a2c:	08002354 	.word	0x08002354
 8001a30:	08002354 	.word	0x08002354
 8001a34:	08002358 	.word	0x08002358

08001a38 <memset>:
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4402      	add	r2, r0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <memset+0xa>
 8001a40:	4770      	bx	lr
 8001a42:	f803 1b01 	strb.w	r1, [r3], #1
 8001a46:	e7f9      	b.n	8001a3c <memset+0x4>

08001a48 <siprintf>:
 8001a48:	b40e      	push	{r1, r2, r3}
 8001a4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a4e:	b500      	push	{lr}
 8001a50:	b09c      	sub	sp, #112	; 0x70
 8001a52:	ab1d      	add	r3, sp, #116	; 0x74
 8001a54:	9002      	str	r0, [sp, #8]
 8001a56:	9006      	str	r0, [sp, #24]
 8001a58:	9107      	str	r1, [sp, #28]
 8001a5a:	9104      	str	r1, [sp, #16]
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <siprintf+0x38>)
 8001a5e:	4909      	ldr	r1, [pc, #36]	; (8001a84 <siprintf+0x3c>)
 8001a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a64:	9105      	str	r1, [sp, #20]
 8001a66:	6800      	ldr	r0, [r0, #0]
 8001a68:	a902      	add	r1, sp, #8
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	f000 f868 	bl	8001b40 <_svfiprintf_r>
 8001a70:	2200      	movs	r2, #0
 8001a72:	9b02      	ldr	r3, [sp, #8]
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	b01c      	add	sp, #112	; 0x70
 8001a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a7c:	b003      	add	sp, #12
 8001a7e:	4770      	bx	lr
 8001a80:	2000000c 	.word	0x2000000c
 8001a84:	ffff0208 	.word	0xffff0208

08001a88 <__ssputs_r>:
 8001a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a8c:	688e      	ldr	r6, [r1, #8]
 8001a8e:	4682      	mov	sl, r0
 8001a90:	429e      	cmp	r6, r3
 8001a92:	460c      	mov	r4, r1
 8001a94:	4690      	mov	r8, r2
 8001a96:	461f      	mov	r7, r3
 8001a98:	d838      	bhi.n	8001b0c <__ssputs_r+0x84>
 8001a9a:	898a      	ldrh	r2, [r1, #12]
 8001a9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001aa0:	d032      	beq.n	8001b08 <__ssputs_r+0x80>
 8001aa2:	6825      	ldr	r5, [r4, #0]
 8001aa4:	6909      	ldr	r1, [r1, #16]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	eba5 0901 	sub.w	r9, r5, r1
 8001aac:	6965      	ldr	r5, [r4, #20]
 8001aae:	444b      	add	r3, r9
 8001ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ab8:	106d      	asrs	r5, r5, #1
 8001aba:	429d      	cmp	r5, r3
 8001abc:	bf38      	it	cc
 8001abe:	461d      	movcc	r5, r3
 8001ac0:	0553      	lsls	r3, r2, #21
 8001ac2:	d531      	bpl.n	8001b28 <__ssputs_r+0xa0>
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f000 fb53 	bl	8002170 <_malloc_r>
 8001aca:	4606      	mov	r6, r0
 8001acc:	b950      	cbnz	r0, 8001ae4 <__ssputs_r+0x5c>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f8ca 3000 	str.w	r3, [sl]
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ade:	81a3      	strh	r3, [r4, #12]
 8001ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ae4:	464a      	mov	r2, r9
 8001ae6:	6921      	ldr	r1, [r4, #16]
 8001ae8:	f000 face 	bl	8002088 <memcpy>
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af6:	81a3      	strh	r3, [r4, #12]
 8001af8:	6126      	str	r6, [r4, #16]
 8001afa:	444e      	add	r6, r9
 8001afc:	6026      	str	r6, [r4, #0]
 8001afe:	463e      	mov	r6, r7
 8001b00:	6165      	str	r5, [r4, #20]
 8001b02:	eba5 0509 	sub.w	r5, r5, r9
 8001b06:	60a5      	str	r5, [r4, #8]
 8001b08:	42be      	cmp	r6, r7
 8001b0a:	d900      	bls.n	8001b0e <__ssputs_r+0x86>
 8001b0c:	463e      	mov	r6, r7
 8001b0e:	4632      	mov	r2, r6
 8001b10:	4641      	mov	r1, r8
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	f000 fac6 	bl	80020a4 <memmove>
 8001b18:	68a3      	ldr	r3, [r4, #8]
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	1b9b      	subs	r3, r3, r6
 8001b1e:	4432      	add	r2, r6
 8001b20:	2000      	movs	r0, #0
 8001b22:	60a3      	str	r3, [r4, #8]
 8001b24:	6022      	str	r2, [r4, #0]
 8001b26:	e7db      	b.n	8001ae0 <__ssputs_r+0x58>
 8001b28:	462a      	mov	r2, r5
 8001b2a:	f000 fb7b 	bl	8002224 <_realloc_r>
 8001b2e:	4606      	mov	r6, r0
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d1e1      	bne.n	8001af8 <__ssputs_r+0x70>
 8001b34:	4650      	mov	r0, sl
 8001b36:	6921      	ldr	r1, [r4, #16]
 8001b38:	f000 face 	bl	80020d8 <_free_r>
 8001b3c:	e7c7      	b.n	8001ace <__ssputs_r+0x46>
	...

08001b40 <_svfiprintf_r>:
 8001b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b44:	4698      	mov	r8, r3
 8001b46:	898b      	ldrh	r3, [r1, #12]
 8001b48:	4607      	mov	r7, r0
 8001b4a:	061b      	lsls	r3, r3, #24
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	b09d      	sub	sp, #116	; 0x74
 8001b52:	d50e      	bpl.n	8001b72 <_svfiprintf_r+0x32>
 8001b54:	690b      	ldr	r3, [r1, #16]
 8001b56:	b963      	cbnz	r3, 8001b72 <_svfiprintf_r+0x32>
 8001b58:	2140      	movs	r1, #64	; 0x40
 8001b5a:	f000 fb09 	bl	8002170 <_malloc_r>
 8001b5e:	6028      	str	r0, [r5, #0]
 8001b60:	6128      	str	r0, [r5, #16]
 8001b62:	b920      	cbnz	r0, 8001b6e <_svfiprintf_r+0x2e>
 8001b64:	230c      	movs	r3, #12
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	e0d1      	b.n	8001d12 <_svfiprintf_r+0x1d2>
 8001b6e:	2340      	movs	r3, #64	; 0x40
 8001b70:	616b      	str	r3, [r5, #20]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9309      	str	r3, [sp, #36]	; 0x24
 8001b76:	2320      	movs	r3, #32
 8001b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b7c:	2330      	movs	r3, #48	; 0x30
 8001b7e:	f04f 0901 	mov.w	r9, #1
 8001b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001d2c <_svfiprintf_r+0x1ec>
 8001b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b8e:	4623      	mov	r3, r4
 8001b90:	469a      	mov	sl, r3
 8001b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b96:	b10a      	cbz	r2, 8001b9c <_svfiprintf_r+0x5c>
 8001b98:	2a25      	cmp	r2, #37	; 0x25
 8001b9a:	d1f9      	bne.n	8001b90 <_svfiprintf_r+0x50>
 8001b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8001ba0:	d00b      	beq.n	8001bba <_svfiprintf_r+0x7a>
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4638      	mov	r0, r7
 8001baa:	f7ff ff6d 	bl	8001a88 <__ssputs_r>
 8001bae:	3001      	adds	r0, #1
 8001bb0:	f000 80aa 	beq.w	8001d08 <_svfiprintf_r+0x1c8>
 8001bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bb6:	445a      	add	r2, fp
 8001bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8001bba:	f89a 3000 	ldrb.w	r3, [sl]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80a2 	beq.w	8001d08 <_svfiprintf_r+0x1c8>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bce:	f10a 0a01 	add.w	sl, sl, #1
 8001bd2:	9304      	str	r3, [sp, #16]
 8001bd4:	9307      	str	r3, [sp, #28]
 8001bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bda:	931a      	str	r3, [sp, #104]	; 0x68
 8001bdc:	4654      	mov	r4, sl
 8001bde:	2205      	movs	r2, #5
 8001be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001be4:	4851      	ldr	r0, [pc, #324]	; (8001d2c <_svfiprintf_r+0x1ec>)
 8001be6:	f000 fa41 	bl	800206c <memchr>
 8001bea:	9a04      	ldr	r2, [sp, #16]
 8001bec:	b9d8      	cbnz	r0, 8001c26 <_svfiprintf_r+0xe6>
 8001bee:	06d0      	lsls	r0, r2, #27
 8001bf0:	bf44      	itt	mi
 8001bf2:	2320      	movmi	r3, #32
 8001bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bf8:	0711      	lsls	r1, r2, #28
 8001bfa:	bf44      	itt	mi
 8001bfc:	232b      	movmi	r3, #43	; 0x2b
 8001bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c02:	f89a 3000 	ldrb.w	r3, [sl]
 8001c06:	2b2a      	cmp	r3, #42	; 0x2a
 8001c08:	d015      	beq.n	8001c36 <_svfiprintf_r+0xf6>
 8001c0a:	4654      	mov	r4, sl
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f04f 0c0a 	mov.w	ip, #10
 8001c12:	9a07      	ldr	r2, [sp, #28]
 8001c14:	4621      	mov	r1, r4
 8001c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c1a:	3b30      	subs	r3, #48	; 0x30
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d94e      	bls.n	8001cbe <_svfiprintf_r+0x17e>
 8001c20:	b1b0      	cbz	r0, 8001c50 <_svfiprintf_r+0x110>
 8001c22:	9207      	str	r2, [sp, #28]
 8001c24:	e014      	b.n	8001c50 <_svfiprintf_r+0x110>
 8001c26:	eba0 0308 	sub.w	r3, r0, r8
 8001c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	46a2      	mov	sl, r4
 8001c32:	9304      	str	r3, [sp, #16]
 8001c34:	e7d2      	b.n	8001bdc <_svfiprintf_r+0x9c>
 8001c36:	9b03      	ldr	r3, [sp, #12]
 8001c38:	1d19      	adds	r1, r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	9103      	str	r1, [sp, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bfbb      	ittet	lt
 8001c42:	425b      	neglt	r3, r3
 8001c44:	f042 0202 	orrlt.w	r2, r2, #2
 8001c48:	9307      	strge	r3, [sp, #28]
 8001c4a:	9307      	strlt	r3, [sp, #28]
 8001c4c:	bfb8      	it	lt
 8001c4e:	9204      	strlt	r2, [sp, #16]
 8001c50:	7823      	ldrb	r3, [r4, #0]
 8001c52:	2b2e      	cmp	r3, #46	; 0x2e
 8001c54:	d10c      	bne.n	8001c70 <_svfiprintf_r+0x130>
 8001c56:	7863      	ldrb	r3, [r4, #1]
 8001c58:	2b2a      	cmp	r3, #42	; 0x2a
 8001c5a:	d135      	bne.n	8001cc8 <_svfiprintf_r+0x188>
 8001c5c:	9b03      	ldr	r3, [sp, #12]
 8001c5e:	3402      	adds	r4, #2
 8001c60:	1d1a      	adds	r2, r3, #4
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	9203      	str	r2, [sp, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bfb8      	it	lt
 8001c6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c6e:	9305      	str	r3, [sp, #20]
 8001c70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001d3c <_svfiprintf_r+0x1fc>
 8001c74:	2203      	movs	r2, #3
 8001c76:	4650      	mov	r0, sl
 8001c78:	7821      	ldrb	r1, [r4, #0]
 8001c7a:	f000 f9f7 	bl	800206c <memchr>
 8001c7e:	b140      	cbz	r0, 8001c92 <_svfiprintf_r+0x152>
 8001c80:	2340      	movs	r3, #64	; 0x40
 8001c82:	eba0 000a 	sub.w	r0, r0, sl
 8001c86:	fa03 f000 	lsl.w	r0, r3, r0
 8001c8a:	9b04      	ldr	r3, [sp, #16]
 8001c8c:	3401      	adds	r4, #1
 8001c8e:	4303      	orrs	r3, r0
 8001c90:	9304      	str	r3, [sp, #16]
 8001c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c96:	2206      	movs	r2, #6
 8001c98:	4825      	ldr	r0, [pc, #148]	; (8001d30 <_svfiprintf_r+0x1f0>)
 8001c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c9e:	f000 f9e5 	bl	800206c <memchr>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d038      	beq.n	8001d18 <_svfiprintf_r+0x1d8>
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <_svfiprintf_r+0x1f4>)
 8001ca8:	bb1b      	cbnz	r3, 8001cf2 <_svfiprintf_r+0x1b2>
 8001caa:	9b03      	ldr	r3, [sp, #12]
 8001cac:	3307      	adds	r3, #7
 8001cae:	f023 0307 	bic.w	r3, r3, #7
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cb8:	4433      	add	r3, r6
 8001cba:	9309      	str	r3, [sp, #36]	; 0x24
 8001cbc:	e767      	b.n	8001b8e <_svfiprintf_r+0x4e>
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cc6:	e7a5      	b.n	8001c14 <_svfiprintf_r+0xd4>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f04f 0c0a 	mov.w	ip, #10
 8001cce:	4619      	mov	r1, r3
 8001cd0:	3401      	adds	r4, #1
 8001cd2:	9305      	str	r3, [sp, #20]
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cda:	3a30      	subs	r2, #48	; 0x30
 8001cdc:	2a09      	cmp	r2, #9
 8001cde:	d903      	bls.n	8001ce8 <_svfiprintf_r+0x1a8>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0c5      	beq.n	8001c70 <_svfiprintf_r+0x130>
 8001ce4:	9105      	str	r1, [sp, #20]
 8001ce6:	e7c3      	b.n	8001c70 <_svfiprintf_r+0x130>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	2301      	movs	r3, #1
 8001cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cf0:	e7f0      	b.n	8001cd4 <_svfiprintf_r+0x194>
 8001cf2:	ab03      	add	r3, sp, #12
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	4638      	mov	r0, r7
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <_svfiprintf_r+0x1f8>)
 8001cfc:	a904      	add	r1, sp, #16
 8001cfe:	f3af 8000 	nop.w
 8001d02:	1c42      	adds	r2, r0, #1
 8001d04:	4606      	mov	r6, r0
 8001d06:	d1d6      	bne.n	8001cb6 <_svfiprintf_r+0x176>
 8001d08:	89ab      	ldrh	r3, [r5, #12]
 8001d0a:	065b      	lsls	r3, r3, #25
 8001d0c:	f53f af2c 	bmi.w	8001b68 <_svfiprintf_r+0x28>
 8001d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d12:	b01d      	add	sp, #116	; 0x74
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d18:	ab03      	add	r3, sp, #12
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	462a      	mov	r2, r5
 8001d1e:	4638      	mov	r0, r7
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <_svfiprintf_r+0x1f8>)
 8001d22:	a904      	add	r1, sp, #16
 8001d24:	f000 f87c 	bl	8001e20 <_printf_i>
 8001d28:	e7eb      	b.n	8001d02 <_svfiprintf_r+0x1c2>
 8001d2a:	bf00      	nop
 8001d2c:	08002320 	.word	0x08002320
 8001d30:	0800232a 	.word	0x0800232a
 8001d34:	00000000 	.word	0x00000000
 8001d38:	08001a89 	.word	0x08001a89
 8001d3c:	08002326 	.word	0x08002326

08001d40 <_printf_common>:
 8001d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d44:	4616      	mov	r6, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	688a      	ldr	r2, [r1, #8]
 8001d4a:	690b      	ldr	r3, [r1, #16]
 8001d4c:	4607      	mov	r7, r0
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	bfb8      	it	lt
 8001d52:	4613      	movlt	r3, r2
 8001d54:	6033      	str	r3, [r6, #0]
 8001d56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d60:	b10a      	cbz	r2, 8001d66 <_printf_common+0x26>
 8001d62:	3301      	adds	r3, #1
 8001d64:	6033      	str	r3, [r6, #0]
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	0699      	lsls	r1, r3, #26
 8001d6a:	bf42      	ittt	mi
 8001d6c:	6833      	ldrmi	r3, [r6, #0]
 8001d6e:	3302      	addmi	r3, #2
 8001d70:	6033      	strmi	r3, [r6, #0]
 8001d72:	6825      	ldr	r5, [r4, #0]
 8001d74:	f015 0506 	ands.w	r5, r5, #6
 8001d78:	d106      	bne.n	8001d88 <_printf_common+0x48>
 8001d7a:	f104 0a19 	add.w	sl, r4, #25
 8001d7e:	68e3      	ldr	r3, [r4, #12]
 8001d80:	6832      	ldr	r2, [r6, #0]
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	42ab      	cmp	r3, r5
 8001d86:	dc28      	bgt.n	8001dda <_printf_common+0x9a>
 8001d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d8c:	1e13      	subs	r3, r2, #0
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	bf18      	it	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	0692      	lsls	r2, r2, #26
 8001d96:	d42d      	bmi.n	8001df4 <_printf_common+0xb4>
 8001d98:	4649      	mov	r1, r9
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001da0:	47c0      	blx	r8
 8001da2:	3001      	adds	r0, #1
 8001da4:	d020      	beq.n	8001de8 <_printf_common+0xa8>
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	68e5      	ldr	r5, [r4, #12]
 8001daa:	f003 0306 	and.w	r3, r3, #6
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf18      	it	ne
 8001db2:	2500      	movne	r5, #0
 8001db4:	6832      	ldr	r2, [r6, #0]
 8001db6:	f04f 0600 	mov.w	r6, #0
 8001dba:	68a3      	ldr	r3, [r4, #8]
 8001dbc:	bf08      	it	eq
 8001dbe:	1aad      	subeq	r5, r5, r2
 8001dc0:	6922      	ldr	r2, [r4, #16]
 8001dc2:	bf08      	it	eq
 8001dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bfc4      	itt	gt
 8001dcc:	1a9b      	subgt	r3, r3, r2
 8001dce:	18ed      	addgt	r5, r5, r3
 8001dd0:	341a      	adds	r4, #26
 8001dd2:	42b5      	cmp	r5, r6
 8001dd4:	d11a      	bne.n	8001e0c <_printf_common+0xcc>
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	e008      	b.n	8001dec <_printf_common+0xac>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	4652      	mov	r2, sl
 8001dde:	4649      	mov	r1, r9
 8001de0:	4638      	mov	r0, r7
 8001de2:	47c0      	blx	r8
 8001de4:	3001      	adds	r0, #1
 8001de6:	d103      	bne.n	8001df0 <_printf_common+0xb0>
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df0:	3501      	adds	r5, #1
 8001df2:	e7c4      	b.n	8001d7e <_printf_common+0x3e>
 8001df4:	2030      	movs	r0, #48	; 0x30
 8001df6:	18e1      	adds	r1, r4, r3
 8001df8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e02:	4422      	add	r2, r4
 8001e04:	3302      	adds	r3, #2
 8001e06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e0a:	e7c5      	b.n	8001d98 <_printf_common+0x58>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	4622      	mov	r2, r4
 8001e10:	4649      	mov	r1, r9
 8001e12:	4638      	mov	r0, r7
 8001e14:	47c0      	blx	r8
 8001e16:	3001      	adds	r0, #1
 8001e18:	d0e6      	beq.n	8001de8 <_printf_common+0xa8>
 8001e1a:	3601      	adds	r6, #1
 8001e1c:	e7d9      	b.n	8001dd2 <_printf_common+0x92>
	...

08001e20 <_printf_i>:
 8001e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e24:	460c      	mov	r4, r1
 8001e26:	7e27      	ldrb	r7, [r4, #24]
 8001e28:	4691      	mov	r9, r2
 8001e2a:	2f78      	cmp	r7, #120	; 0x78
 8001e2c:	4680      	mov	r8, r0
 8001e2e:	469a      	mov	sl, r3
 8001e30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e36:	d807      	bhi.n	8001e48 <_printf_i+0x28>
 8001e38:	2f62      	cmp	r7, #98	; 0x62
 8001e3a:	d80a      	bhi.n	8001e52 <_printf_i+0x32>
 8001e3c:	2f00      	cmp	r7, #0
 8001e3e:	f000 80d9 	beq.w	8001ff4 <_printf_i+0x1d4>
 8001e42:	2f58      	cmp	r7, #88	; 0x58
 8001e44:	f000 80a4 	beq.w	8001f90 <_printf_i+0x170>
 8001e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e50:	e03a      	b.n	8001ec8 <_printf_i+0xa8>
 8001e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e56:	2b15      	cmp	r3, #21
 8001e58:	d8f6      	bhi.n	8001e48 <_printf_i+0x28>
 8001e5a:	a001      	add	r0, pc, #4	; (adr r0, 8001e60 <_printf_i+0x40>)
 8001e5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001e60:	08001eb9 	.word	0x08001eb9
 8001e64:	08001ecd 	.word	0x08001ecd
 8001e68:	08001e49 	.word	0x08001e49
 8001e6c:	08001e49 	.word	0x08001e49
 8001e70:	08001e49 	.word	0x08001e49
 8001e74:	08001e49 	.word	0x08001e49
 8001e78:	08001ecd 	.word	0x08001ecd
 8001e7c:	08001e49 	.word	0x08001e49
 8001e80:	08001e49 	.word	0x08001e49
 8001e84:	08001e49 	.word	0x08001e49
 8001e88:	08001e49 	.word	0x08001e49
 8001e8c:	08001fdb 	.word	0x08001fdb
 8001e90:	08001efd 	.word	0x08001efd
 8001e94:	08001fbd 	.word	0x08001fbd
 8001e98:	08001e49 	.word	0x08001e49
 8001e9c:	08001e49 	.word	0x08001e49
 8001ea0:	08001ffd 	.word	0x08001ffd
 8001ea4:	08001e49 	.word	0x08001e49
 8001ea8:	08001efd 	.word	0x08001efd
 8001eac:	08001e49 	.word	0x08001e49
 8001eb0:	08001e49 	.word	0x08001e49
 8001eb4:	08001fc5 	.word	0x08001fc5
 8001eb8:	680b      	ldr	r3, [r1, #0]
 8001eba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ebe:	1d1a      	adds	r2, r3, #4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	600a      	str	r2, [r1, #0]
 8001ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0a4      	b.n	8002016 <_printf_i+0x1f6>
 8001ecc:	6825      	ldr	r5, [r4, #0]
 8001ece:	6808      	ldr	r0, [r1, #0]
 8001ed0:	062e      	lsls	r6, r5, #24
 8001ed2:	f100 0304 	add.w	r3, r0, #4
 8001ed6:	d50a      	bpl.n	8001eee <_printf_i+0xce>
 8001ed8:	6805      	ldr	r5, [r0, #0]
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	da03      	bge.n	8001ee8 <_printf_i+0xc8>
 8001ee0:	232d      	movs	r3, #45	; 0x2d
 8001ee2:	426d      	negs	r5, r5
 8001ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ee8:	230a      	movs	r3, #10
 8001eea:	485e      	ldr	r0, [pc, #376]	; (8002064 <_printf_i+0x244>)
 8001eec:	e019      	b.n	8001f22 <_printf_i+0x102>
 8001eee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001ef2:	6805      	ldr	r5, [r0, #0]
 8001ef4:	600b      	str	r3, [r1, #0]
 8001ef6:	bf18      	it	ne
 8001ef8:	b22d      	sxthne	r5, r5
 8001efa:	e7ef      	b.n	8001edc <_printf_i+0xbc>
 8001efc:	680b      	ldr	r3, [r1, #0]
 8001efe:	6825      	ldr	r5, [r4, #0]
 8001f00:	1d18      	adds	r0, r3, #4
 8001f02:	6008      	str	r0, [r1, #0]
 8001f04:	0628      	lsls	r0, r5, #24
 8001f06:	d501      	bpl.n	8001f0c <_printf_i+0xec>
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	e002      	b.n	8001f12 <_printf_i+0xf2>
 8001f0c:	0669      	lsls	r1, r5, #25
 8001f0e:	d5fb      	bpl.n	8001f08 <_printf_i+0xe8>
 8001f10:	881d      	ldrh	r5, [r3, #0]
 8001f12:	2f6f      	cmp	r7, #111	; 0x6f
 8001f14:	bf0c      	ite	eq
 8001f16:	2308      	moveq	r3, #8
 8001f18:	230a      	movne	r3, #10
 8001f1a:	4852      	ldr	r0, [pc, #328]	; (8002064 <_printf_i+0x244>)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f22:	6866      	ldr	r6, [r4, #4]
 8001f24:	2e00      	cmp	r6, #0
 8001f26:	bfa8      	it	ge
 8001f28:	6821      	ldrge	r1, [r4, #0]
 8001f2a:	60a6      	str	r6, [r4, #8]
 8001f2c:	bfa4      	itt	ge
 8001f2e:	f021 0104 	bicge.w	r1, r1, #4
 8001f32:	6021      	strge	r1, [r4, #0]
 8001f34:	b90d      	cbnz	r5, 8001f3a <_printf_i+0x11a>
 8001f36:	2e00      	cmp	r6, #0
 8001f38:	d04d      	beq.n	8001fd6 <_printf_i+0x1b6>
 8001f3a:	4616      	mov	r6, r2
 8001f3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f40:	fb03 5711 	mls	r7, r3, r1, r5
 8001f44:	5dc7      	ldrb	r7, [r0, r7]
 8001f46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f4a:	462f      	mov	r7, r5
 8001f4c:	42bb      	cmp	r3, r7
 8001f4e:	460d      	mov	r5, r1
 8001f50:	d9f4      	bls.n	8001f3c <_printf_i+0x11c>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d10b      	bne.n	8001f6e <_printf_i+0x14e>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	07df      	lsls	r7, r3, #31
 8001f5a:	d508      	bpl.n	8001f6e <_printf_i+0x14e>
 8001f5c:	6923      	ldr	r3, [r4, #16]
 8001f5e:	6861      	ldr	r1, [r4, #4]
 8001f60:	4299      	cmp	r1, r3
 8001f62:	bfde      	ittt	le
 8001f64:	2330      	movle	r3, #48	; 0x30
 8001f66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f6e:	1b92      	subs	r2, r2, r6
 8001f70:	6122      	str	r2, [r4, #16]
 8001f72:	464b      	mov	r3, r9
 8001f74:	4621      	mov	r1, r4
 8001f76:	4640      	mov	r0, r8
 8001f78:	f8cd a000 	str.w	sl, [sp]
 8001f7c:	aa03      	add	r2, sp, #12
 8001f7e:	f7ff fedf 	bl	8001d40 <_printf_common>
 8001f82:	3001      	adds	r0, #1
 8001f84:	d14c      	bne.n	8002020 <_printf_i+0x200>
 8001f86:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8a:	b004      	add	sp, #16
 8001f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f90:	4834      	ldr	r0, [pc, #208]	; (8002064 <_printf_i+0x244>)
 8001f92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001f96:	680e      	ldr	r6, [r1, #0]
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8001f9e:	061f      	lsls	r7, r3, #24
 8001fa0:	600e      	str	r6, [r1, #0]
 8001fa2:	d514      	bpl.n	8001fce <_printf_i+0x1ae>
 8001fa4:	07d9      	lsls	r1, r3, #31
 8001fa6:	bf44      	itt	mi
 8001fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8001fac:	6023      	strmi	r3, [r4, #0]
 8001fae:	b91d      	cbnz	r5, 8001fb8 <_printf_i+0x198>
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	f023 0320 	bic.w	r3, r3, #32
 8001fb6:	6023      	str	r3, [r4, #0]
 8001fb8:	2310      	movs	r3, #16
 8001fba:	e7af      	b.n	8001f1c <_printf_i+0xfc>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	6023      	str	r3, [r4, #0]
 8001fc4:	2378      	movs	r3, #120	; 0x78
 8001fc6:	4828      	ldr	r0, [pc, #160]	; (8002068 <_printf_i+0x248>)
 8001fc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fcc:	e7e3      	b.n	8001f96 <_printf_i+0x176>
 8001fce:	065e      	lsls	r6, r3, #25
 8001fd0:	bf48      	it	mi
 8001fd2:	b2ad      	uxthmi	r5, r5
 8001fd4:	e7e6      	b.n	8001fa4 <_printf_i+0x184>
 8001fd6:	4616      	mov	r6, r2
 8001fd8:	e7bb      	b.n	8001f52 <_printf_i+0x132>
 8001fda:	680b      	ldr	r3, [r1, #0]
 8001fdc:	6826      	ldr	r6, [r4, #0]
 8001fde:	1d1d      	adds	r5, r3, #4
 8001fe0:	6960      	ldr	r0, [r4, #20]
 8001fe2:	600d      	str	r5, [r1, #0]
 8001fe4:	0635      	lsls	r5, r6, #24
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	d501      	bpl.n	8001fee <_printf_i+0x1ce>
 8001fea:	6018      	str	r0, [r3, #0]
 8001fec:	e002      	b.n	8001ff4 <_printf_i+0x1d4>
 8001fee:	0671      	lsls	r1, r6, #25
 8001ff0:	d5fb      	bpl.n	8001fea <_printf_i+0x1ca>
 8001ff2:	8018      	strh	r0, [r3, #0]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4616      	mov	r6, r2
 8001ff8:	6123      	str	r3, [r4, #16]
 8001ffa:	e7ba      	b.n	8001f72 <_printf_i+0x152>
 8001ffc:	680b      	ldr	r3, [r1, #0]
 8001ffe:	1d1a      	adds	r2, r3, #4
 8002000:	600a      	str	r2, [r1, #0]
 8002002:	681e      	ldr	r6, [r3, #0]
 8002004:	2100      	movs	r1, #0
 8002006:	4630      	mov	r0, r6
 8002008:	6862      	ldr	r2, [r4, #4]
 800200a:	f000 f82f 	bl	800206c <memchr>
 800200e:	b108      	cbz	r0, 8002014 <_printf_i+0x1f4>
 8002010:	1b80      	subs	r0, r0, r6
 8002012:	6060      	str	r0, [r4, #4]
 8002014:	6863      	ldr	r3, [r4, #4]
 8002016:	6123      	str	r3, [r4, #16]
 8002018:	2300      	movs	r3, #0
 800201a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800201e:	e7a8      	b.n	8001f72 <_printf_i+0x152>
 8002020:	4632      	mov	r2, r6
 8002022:	4649      	mov	r1, r9
 8002024:	4640      	mov	r0, r8
 8002026:	6923      	ldr	r3, [r4, #16]
 8002028:	47d0      	blx	sl
 800202a:	3001      	adds	r0, #1
 800202c:	d0ab      	beq.n	8001f86 <_printf_i+0x166>
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	079b      	lsls	r3, r3, #30
 8002032:	d413      	bmi.n	800205c <_printf_i+0x23c>
 8002034:	68e0      	ldr	r0, [r4, #12]
 8002036:	9b03      	ldr	r3, [sp, #12]
 8002038:	4298      	cmp	r0, r3
 800203a:	bfb8      	it	lt
 800203c:	4618      	movlt	r0, r3
 800203e:	e7a4      	b.n	8001f8a <_printf_i+0x16a>
 8002040:	2301      	movs	r3, #1
 8002042:	4632      	mov	r2, r6
 8002044:	4649      	mov	r1, r9
 8002046:	4640      	mov	r0, r8
 8002048:	47d0      	blx	sl
 800204a:	3001      	adds	r0, #1
 800204c:	d09b      	beq.n	8001f86 <_printf_i+0x166>
 800204e:	3501      	adds	r5, #1
 8002050:	68e3      	ldr	r3, [r4, #12]
 8002052:	9903      	ldr	r1, [sp, #12]
 8002054:	1a5b      	subs	r3, r3, r1
 8002056:	42ab      	cmp	r3, r5
 8002058:	dcf2      	bgt.n	8002040 <_printf_i+0x220>
 800205a:	e7eb      	b.n	8002034 <_printf_i+0x214>
 800205c:	2500      	movs	r5, #0
 800205e:	f104 0619 	add.w	r6, r4, #25
 8002062:	e7f5      	b.n	8002050 <_printf_i+0x230>
 8002064:	08002331 	.word	0x08002331
 8002068:	08002342 	.word	0x08002342

0800206c <memchr>:
 800206c:	4603      	mov	r3, r0
 800206e:	b510      	push	{r4, lr}
 8002070:	b2c9      	uxtb	r1, r1
 8002072:	4402      	add	r2, r0
 8002074:	4293      	cmp	r3, r2
 8002076:	4618      	mov	r0, r3
 8002078:	d101      	bne.n	800207e <memchr+0x12>
 800207a:	2000      	movs	r0, #0
 800207c:	e003      	b.n	8002086 <memchr+0x1a>
 800207e:	7804      	ldrb	r4, [r0, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	428c      	cmp	r4, r1
 8002084:	d1f6      	bne.n	8002074 <memchr+0x8>
 8002086:	bd10      	pop	{r4, pc}

08002088 <memcpy>:
 8002088:	440a      	add	r2, r1
 800208a:	4291      	cmp	r1, r2
 800208c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002090:	d100      	bne.n	8002094 <memcpy+0xc>
 8002092:	4770      	bx	lr
 8002094:	b510      	push	{r4, lr}
 8002096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800209a:	4291      	cmp	r1, r2
 800209c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020a0:	d1f9      	bne.n	8002096 <memcpy+0xe>
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <memmove>:
 80020a4:	4288      	cmp	r0, r1
 80020a6:	b510      	push	{r4, lr}
 80020a8:	eb01 0402 	add.w	r4, r1, r2
 80020ac:	d902      	bls.n	80020b4 <memmove+0x10>
 80020ae:	4284      	cmp	r4, r0
 80020b0:	4623      	mov	r3, r4
 80020b2:	d807      	bhi.n	80020c4 <memmove+0x20>
 80020b4:	1e43      	subs	r3, r0, #1
 80020b6:	42a1      	cmp	r1, r4
 80020b8:	d008      	beq.n	80020cc <memmove+0x28>
 80020ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020c2:	e7f8      	b.n	80020b6 <memmove+0x12>
 80020c4:	4601      	mov	r1, r0
 80020c6:	4402      	add	r2, r0
 80020c8:	428a      	cmp	r2, r1
 80020ca:	d100      	bne.n	80020ce <memmove+0x2a>
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020d6:	e7f7      	b.n	80020c8 <memmove+0x24>

080020d8 <_free_r>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4605      	mov	r5, r0
 80020dc:	2900      	cmp	r1, #0
 80020de:	d043      	beq.n	8002168 <_free_r+0x90>
 80020e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020e4:	1f0c      	subs	r4, r1, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bfb8      	it	lt
 80020ea:	18e4      	addlt	r4, r4, r3
 80020ec:	f000 f8d0 	bl	8002290 <__malloc_lock>
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <_free_r+0x94>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	4610      	mov	r0, r2
 80020f6:	b933      	cbnz	r3, 8002106 <_free_r+0x2e>
 80020f8:	6063      	str	r3, [r4, #4]
 80020fa:	6014      	str	r4, [r2, #0]
 80020fc:	4628      	mov	r0, r5
 80020fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002102:	f000 b8cb 	b.w	800229c <__malloc_unlock>
 8002106:	42a3      	cmp	r3, r4
 8002108:	d90a      	bls.n	8002120 <_free_r+0x48>
 800210a:	6821      	ldr	r1, [r4, #0]
 800210c:	1862      	adds	r2, r4, r1
 800210e:	4293      	cmp	r3, r2
 8002110:	bf01      	itttt	eq
 8002112:	681a      	ldreq	r2, [r3, #0]
 8002114:	685b      	ldreq	r3, [r3, #4]
 8002116:	1852      	addeq	r2, r2, r1
 8002118:	6022      	streq	r2, [r4, #0]
 800211a:	6063      	str	r3, [r4, #4]
 800211c:	6004      	str	r4, [r0, #0]
 800211e:	e7ed      	b.n	80020fc <_free_r+0x24>
 8002120:	461a      	mov	r2, r3
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	b10b      	cbz	r3, 800212a <_free_r+0x52>
 8002126:	42a3      	cmp	r3, r4
 8002128:	d9fa      	bls.n	8002120 <_free_r+0x48>
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	1850      	adds	r0, r2, r1
 800212e:	42a0      	cmp	r0, r4
 8002130:	d10b      	bne.n	800214a <_free_r+0x72>
 8002132:	6820      	ldr	r0, [r4, #0]
 8002134:	4401      	add	r1, r0
 8002136:	1850      	adds	r0, r2, r1
 8002138:	4283      	cmp	r3, r0
 800213a:	6011      	str	r1, [r2, #0]
 800213c:	d1de      	bne.n	80020fc <_free_r+0x24>
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4401      	add	r1, r0
 8002144:	6011      	str	r1, [r2, #0]
 8002146:	6053      	str	r3, [r2, #4]
 8002148:	e7d8      	b.n	80020fc <_free_r+0x24>
 800214a:	d902      	bls.n	8002152 <_free_r+0x7a>
 800214c:	230c      	movs	r3, #12
 800214e:	602b      	str	r3, [r5, #0]
 8002150:	e7d4      	b.n	80020fc <_free_r+0x24>
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	1821      	adds	r1, r4, r0
 8002156:	428b      	cmp	r3, r1
 8002158:	bf01      	itttt	eq
 800215a:	6819      	ldreq	r1, [r3, #0]
 800215c:	685b      	ldreq	r3, [r3, #4]
 800215e:	1809      	addeq	r1, r1, r0
 8002160:	6021      	streq	r1, [r4, #0]
 8002162:	6063      	str	r3, [r4, #4]
 8002164:	6054      	str	r4, [r2, #4]
 8002166:	e7c9      	b.n	80020fc <_free_r+0x24>
 8002168:	bd38      	pop	{r3, r4, r5, pc}
 800216a:	bf00      	nop
 800216c:	200000b0 	.word	0x200000b0

08002170 <_malloc_r>:
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002172:	1ccd      	adds	r5, r1, #3
 8002174:	f025 0503 	bic.w	r5, r5, #3
 8002178:	3508      	adds	r5, #8
 800217a:	2d0c      	cmp	r5, #12
 800217c:	bf38      	it	cc
 800217e:	250c      	movcc	r5, #12
 8002180:	2d00      	cmp	r5, #0
 8002182:	4606      	mov	r6, r0
 8002184:	db01      	blt.n	800218a <_malloc_r+0x1a>
 8002186:	42a9      	cmp	r1, r5
 8002188:	d903      	bls.n	8002192 <_malloc_r+0x22>
 800218a:	230c      	movs	r3, #12
 800218c:	6033      	str	r3, [r6, #0]
 800218e:	2000      	movs	r0, #0
 8002190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002192:	f000 f87d 	bl	8002290 <__malloc_lock>
 8002196:	4921      	ldr	r1, [pc, #132]	; (800221c <_malloc_r+0xac>)
 8002198:	680a      	ldr	r2, [r1, #0]
 800219a:	4614      	mov	r4, r2
 800219c:	b99c      	cbnz	r4, 80021c6 <_malloc_r+0x56>
 800219e:	4f20      	ldr	r7, [pc, #128]	; (8002220 <_malloc_r+0xb0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b923      	cbnz	r3, 80021ae <_malloc_r+0x3e>
 80021a4:	4621      	mov	r1, r4
 80021a6:	4630      	mov	r0, r6
 80021a8:	f000 f862 	bl	8002270 <_sbrk_r>
 80021ac:	6038      	str	r0, [r7, #0]
 80021ae:	4629      	mov	r1, r5
 80021b0:	4630      	mov	r0, r6
 80021b2:	f000 f85d 	bl	8002270 <_sbrk_r>
 80021b6:	1c43      	adds	r3, r0, #1
 80021b8:	d123      	bne.n	8002202 <_malloc_r+0x92>
 80021ba:	230c      	movs	r3, #12
 80021bc:	4630      	mov	r0, r6
 80021be:	6033      	str	r3, [r6, #0]
 80021c0:	f000 f86c 	bl	800229c <__malloc_unlock>
 80021c4:	e7e3      	b.n	800218e <_malloc_r+0x1e>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	1b5b      	subs	r3, r3, r5
 80021ca:	d417      	bmi.n	80021fc <_malloc_r+0x8c>
 80021cc:	2b0b      	cmp	r3, #11
 80021ce:	d903      	bls.n	80021d8 <_malloc_r+0x68>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	441c      	add	r4, r3
 80021d4:	6025      	str	r5, [r4, #0]
 80021d6:	e004      	b.n	80021e2 <_malloc_r+0x72>
 80021d8:	6863      	ldr	r3, [r4, #4]
 80021da:	42a2      	cmp	r2, r4
 80021dc:	bf0c      	ite	eq
 80021de:	600b      	streq	r3, [r1, #0]
 80021e0:	6053      	strne	r3, [r2, #4]
 80021e2:	4630      	mov	r0, r6
 80021e4:	f000 f85a 	bl	800229c <__malloc_unlock>
 80021e8:	f104 000b 	add.w	r0, r4, #11
 80021ec:	1d23      	adds	r3, r4, #4
 80021ee:	f020 0007 	bic.w	r0, r0, #7
 80021f2:	1ac2      	subs	r2, r0, r3
 80021f4:	d0cc      	beq.n	8002190 <_malloc_r+0x20>
 80021f6:	1a1b      	subs	r3, r3, r0
 80021f8:	50a3      	str	r3, [r4, r2]
 80021fa:	e7c9      	b.n	8002190 <_malloc_r+0x20>
 80021fc:	4622      	mov	r2, r4
 80021fe:	6864      	ldr	r4, [r4, #4]
 8002200:	e7cc      	b.n	800219c <_malloc_r+0x2c>
 8002202:	1cc4      	adds	r4, r0, #3
 8002204:	f024 0403 	bic.w	r4, r4, #3
 8002208:	42a0      	cmp	r0, r4
 800220a:	d0e3      	beq.n	80021d4 <_malloc_r+0x64>
 800220c:	1a21      	subs	r1, r4, r0
 800220e:	4630      	mov	r0, r6
 8002210:	f000 f82e 	bl	8002270 <_sbrk_r>
 8002214:	3001      	adds	r0, #1
 8002216:	d1dd      	bne.n	80021d4 <_malloc_r+0x64>
 8002218:	e7cf      	b.n	80021ba <_malloc_r+0x4a>
 800221a:	bf00      	nop
 800221c:	200000b0 	.word	0x200000b0
 8002220:	200000b4 	.word	0x200000b4

08002224 <_realloc_r>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	4607      	mov	r7, r0
 8002228:	4614      	mov	r4, r2
 800222a:	460e      	mov	r6, r1
 800222c:	b921      	cbnz	r1, 8002238 <_realloc_r+0x14>
 800222e:	4611      	mov	r1, r2
 8002230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002234:	f7ff bf9c 	b.w	8002170 <_malloc_r>
 8002238:	b922      	cbnz	r2, 8002244 <_realloc_r+0x20>
 800223a:	f7ff ff4d 	bl	80020d8 <_free_r>
 800223e:	4625      	mov	r5, r4
 8002240:	4628      	mov	r0, r5
 8002242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002244:	f000 f830 	bl	80022a8 <_malloc_usable_size_r>
 8002248:	42a0      	cmp	r0, r4
 800224a:	d20f      	bcs.n	800226c <_realloc_r+0x48>
 800224c:	4621      	mov	r1, r4
 800224e:	4638      	mov	r0, r7
 8002250:	f7ff ff8e 	bl	8002170 <_malloc_r>
 8002254:	4605      	mov	r5, r0
 8002256:	2800      	cmp	r0, #0
 8002258:	d0f2      	beq.n	8002240 <_realloc_r+0x1c>
 800225a:	4631      	mov	r1, r6
 800225c:	4622      	mov	r2, r4
 800225e:	f7ff ff13 	bl	8002088 <memcpy>
 8002262:	4631      	mov	r1, r6
 8002264:	4638      	mov	r0, r7
 8002266:	f7ff ff37 	bl	80020d8 <_free_r>
 800226a:	e7e9      	b.n	8002240 <_realloc_r+0x1c>
 800226c:	4635      	mov	r5, r6
 800226e:	e7e7      	b.n	8002240 <_realloc_r+0x1c>

08002270 <_sbrk_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	2300      	movs	r3, #0
 8002274:	4d05      	ldr	r5, [pc, #20]	; (800228c <_sbrk_r+0x1c>)
 8002276:	4604      	mov	r4, r0
 8002278:	4608      	mov	r0, r1
 800227a:	602b      	str	r3, [r5, #0]
 800227c:	f7fe fc08 	bl	8000a90 <_sbrk>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d102      	bne.n	800228a <_sbrk_r+0x1a>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	b103      	cbz	r3, 800228a <_sbrk_r+0x1a>
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	200000bc 	.word	0x200000bc

08002290 <__malloc_lock>:
 8002290:	4801      	ldr	r0, [pc, #4]	; (8002298 <__malloc_lock+0x8>)
 8002292:	f000 b811 	b.w	80022b8 <__retarget_lock_acquire_recursive>
 8002296:	bf00      	nop
 8002298:	200000c4 	.word	0x200000c4

0800229c <__malloc_unlock>:
 800229c:	4801      	ldr	r0, [pc, #4]	; (80022a4 <__malloc_unlock+0x8>)
 800229e:	f000 b80c 	b.w	80022ba <__retarget_lock_release_recursive>
 80022a2:	bf00      	nop
 80022a4:	200000c4 	.word	0x200000c4

080022a8 <_malloc_usable_size_r>:
 80022a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022ac:	1f18      	subs	r0, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bfbc      	itt	lt
 80022b2:	580b      	ldrlt	r3, [r1, r0]
 80022b4:	18c0      	addlt	r0, r0, r3
 80022b6:	4770      	bx	lr

080022b8 <__retarget_lock_acquire_recursive>:
 80022b8:	4770      	bx	lr

080022ba <__retarget_lock_release_recursive>:
 80022ba:	4770      	bx	lr

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
